{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ISB Medical Society Website\n\n## Overview\n\nThis is a full-stack web application for the ISB Medical Society, a student organization focused on healthcare education, medical advocacy, and promoting equity in medicine. The application features a modern React frontend with a Node.js/Express backend, PostgreSQL database, and content management capabilities through an admin panel.\n\nThe system provides public-facing pages for showcasing the society's mission, programs, news, and member profiles, while offering authenticated administrators the ability to manage all website content including members, news articles, and hero images.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Technology Stack:**\n- React 18 with TypeScript for type-safe component development\n- Vite as the build tool for fast development and optimized production builds\n- Wouter for lightweight client-side routing\n- TanStack Query for server state management and data fetching\n- TailwindCSS with Shadcn/ui component library for consistent, accessible UI components\n\n**Design Patterns:**\n- Component-based architecture with reusable UI components\n- Custom hooks for shared logic (authentication, mobile detection, toast notifications)\n- Optimized image loading component with modern format support (AVIF, WebP, JPEG)\n- Responsive design with mobile-first approach\n- Smooth scroll behavior and loading states for enhanced UX\n\n**Key Features:**\n- Public pages: Home, About (member directory), News, Contact\n- Admin dashboard with tabs for managing members, news, and hero images\n- Image cropping functionality for member photos\n- Form validation using React Hook Form with Zod schemas\n- SEO optimization with meta tags and structured data\n\n### Backend Architecture\n\n**Technology Stack:**\n- Node.js with Express for the web server\n- TypeScript for type safety across the codebase\n- Drizzle ORM for type-safe database operations\n- PostgreSQL as the primary database\n- Express sessions with PostgreSQL store for authentication\n\n**API Design:**\n- RESTful API endpoints under `/api` prefix\n- Session-based authentication (no token-based auth currently)\n- Role-based access control with admin middleware\n- JSON request/response format with appropriate error handling\n\n**Authentication & Authorization:**\n- Simple username/password login system\n- Session management using `express-session` with PostgreSQL store\n- Middleware functions for authentication (`isAuthenticated`) and admin access (`isAdmin`)\n- User and AdminUser tables for managing access levels\n- 7-day session expiration\n\n**Database Schema:**\n- `users` - User authentication data (compatible with Replit Auth structure)\n- `adminUsers` - Admin role and permissions mapping\n- `memberClasses` - Categories for organizing members (Officer, Active Member, etc.)\n- `members` - Society member profiles with photo support\n- `news` - News articles and announcements\n- `heroImages` - Carousel images for homepage hero section\n- `programs` - Educational programs and initiatives\n- `sessions` - Express session storage\n\n**Image Processing:**\n- Sharp library for server-side image optimization\n- Multi-format output (AVIF, WebP, JPEG) for browser compatibility\n- Thumbnail generation for performance\n- Base64 data URL support for client uploads\n- Organized file storage in `public/uploads/members/`\n\n### External Dependencies\n\n**Third-Party Services:**\n- **SendGrid** - Email delivery service for contact form submissions\n  - API key required via `SENDGRID_API_KEY` environment variable\n  - Sends emails to `info@isbmedicalsociety.org`\n\n**Database:**\n- **PostgreSQL** - Primary data store\n  - Connection via `DATABASE_URL` environment variable\n  - Managed through Drizzle ORM\n  - Session store integration for authentication\n\n**Major NPM Packages:**\n- `@radix-ui/*` - Accessible component primitives (20+ packages)\n- `drizzle-orm` & `drizzle-kit` - Database ORM and migrations\n- `@neondatabase/serverless` - PostgreSQL driver\n- `sharp` - Image processing\n- `react-easy-crop` - Image cropping UI\n- `zod` - Schema validation\n- `@sendgrid/mail` - Email service\n- `connect-pg-simple` - PostgreSQL session store\n\n**Development Tools:**\n- `tsx` - TypeScript execution for development\n- `esbuild` - Backend bundling for production\n- `tailwindcss` - Utility-first CSS framework\n- `autoprefixer` & `postcss` - CSS processing\n\n**Environment Variables Required:**\n- `DATABASE_URL` - PostgreSQL connection string\n- `SESSION_SECRET` - Secret key for session encryption\n- `SENDGRID_API_KEY` - SendGrid API key (optional for development)\n- `NODE_ENV` - Environment mode (development/production)\n- `PORT` - Server port (defaults to 5000)","size_bytes":4721},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2797},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":635},"attached_assets/content-1756534913318.md":{"content":"![](https://r4kclub.com/images/pre-loader/loader-13.svg)\n\n![slide0](https://r4kclub.com//storage/284/61ebc709cb961_banner.jpg)\n\n![slide0](https://r4kclub.com//storage/286/61ebc7fd3bb1a_banner-th.jpg)\n\n[Previous](https://r4kclub.com/en#carouselExample) [Nextc](https://r4kclub.com/en#carouselExample)\n\n![slide0](https://r4kclub.com//storage/285/61ebc70a1697b_banner-mobile.jpg)\n\n![slide0](https://r4kclub.com//storage/287/61ebc7fd7c27a_banner-th-mobile.jpg)\n\n[Previous](https://r4kclub.com/en#carouselPhone) [Next](https://r4kclub.com/en#carouselPhone)\n\n## Our   Progress and Impact\n\nR4K is now in 9 schools across Thailand, Myanmar, Philippines and Laos.\nWe have grown into a network of 100+ student coaches and teacher advisors, supported by 17 strong core club members.\n\n\n## Our   Courses\n\nProviding kids with the fun experience of\n\nrobotics and programming foundations\n\n[![r4k](https://r4kclub.com//storage/412/63eb4945953b2_18C04C53-2D7A-4242-9C6F-48BDBEB3315E.jpeg)](https://docs.google.com/presentation/d/1OflKdwVpcN1dVqpK6EKd71--vB7qQP4f-RI5MU_bDTc/edit?usp=sharing)\n\n[Detail](https://docs.google.com/presentation/d/1OflKdwVpcN1dVqpK6EKd71--vB7qQP4f-RI5MU_bDTc/edit?usp=sharing)\n\n#### Micro:bit for Beginners (Tiny:bit)\n\nOverview and three classes outlining the basics of robotic programming using the Yahboom Tiny:bit smart robot and BBC Micro:bit chip.\n\n[![r4k](https://r4kclub.com//storage/413/63eb4a29a3332_F24EFC0F-7809-4232-9BB0-FE73CC083C86.jpeg)](https://docs.google.com/presentation/d/13-g4edxw7CDdy4v-hbmjic7MD3ebHB5eBGfPxhVoHOE/edit)\n\n[Detail](https://docs.google.com/presentation/d/13-g4edxw7CDdy4v-hbmjic7MD3ebHB5eBGfPxhVoHOE/edit)\n\n#### Lego EV3 for Beginners\n\nFive class curriculum outlining the basics of robotics programming using the Lego Mindstorms EV3 robot.\n\n[![r4k](https://r4kclub.com//storage/88/5fd6eaaff0299_870x400_08.jpg)](https://drive.google.com/file/d/14_mnA1poyv9cjoB9onj6YppqP5oegOP7/view?usp=sharing)\n\n[Detail](https://drive.google.com/file/d/14_mnA1poyv9cjoB9onj6YppqP5oegOP7/view?usp=sharing)\n\n#### Raspberry Pi for Beginners\n\nThai language Raspberry Pi course with labs and assignments.\n\n[![r4k](https://r4kclub.com//storage/615/65e561fe5fba4_zoombit-v2-TH-800x800.png)](https://docs.google.com/presentation/d/1ndA06pSGkPt7QtOgQYFrn9nsLddMeT5E7ypqfLsIKIU/edit?usp=sharing)\n\n[Detail](https://docs.google.com/presentation/d/1ndA06pSGkPt7QtOgQYFrn9nsLddMeT5E7ypqfLsIKIU/edit?usp=sharing)\n\n#### Micro:bit for Beginners (Zoom:bit)\n\nA course outlining the basics of robotics programming, based on the Micro:bit Zoom:bit platform.\n\n## Our   Activities\n\nOur activities comprise fund raising and setting up R4K\n\nclubs at partner schools, both are of non-profit nature.\n\n[![](https://r4kclub.com//storage/409/63eb476bbef6c_A4FD0D92-1673-4614-8D95-B04FC928CEE5.jpeg)](https://r4kclub.com/en/portfolio/category/20)\n\n#### [R4K at Wat Sai Yai School, Nonthaburi](https://r4kclub.com/en/portfolio/category/20)\n\n[![](https://r4kclub.com//storage/410/63eb47a3738b7_9832607F-1C44-40F4-AC7D-C4C66AA7EE45.jpeg)](https://r4kclub.com/en/portfolio/category/21)\n\n#### [R4K in the Philippines (Xavier School San Juan, Xavier School Nuvali, UP Integrated School)](https://r4kclub.com/en/portfolio/category/21)\n\n[![](https://r4kclub.com//storage/541/6437b232e28a1_7ar4k.jpeg)](https://r4kclub.com/en/portfolio/category/22)\n\n#### [R4K at Pasatipatai School, Luang Prabang, Laos](https://r4kclub.com/en/portfolio/category/22)\n\n[![](https://r4kclub.com//storage/596/65e40c83d562b_R4K-Wat-Lat-Pla-Duk.jpg)](https://r4kclub.com/en/portfolio/category/23)\n\n#### [R4K at Wat Lat Pla Duk School, Nonthaburi](https://r4kclub.com/en/portfolio/category/23)\n\n[![](https://r4kclub.com//storage/219/5fe6d96848b0a_12.jpg)](https://r4kclub.com/en/portfolio/category/14)\n\n#### [Fundraising Activities in Bangkok](https://r4kclub.com/en/portfolio/category/14)\n\n[![](https://r4kclub.com//storage/175/5fe015a49416b_800x600_04.jpg)](https://r4kclub.com/en/portfolio/category/15)\n\n#### [R4K at Prasert Islam School, Nonthaburi](https://r4kclub.com/en/portfolio/category/15)\n\n[![](https://r4kclub.com//storage/133/5fd71ee2030c3_16.jpg)](https://r4kclub.com/en/portfolio/category/16)\n\n#### [R4K at Schools of Hope Foundation for Myanmar Immigrant Children , Myanmar-Thailand Border](https://r4kclub.com/en/portfolio/category/16)\n\n[![](https://r4kclub.com//storage/239/5fe98012bfd74_IMG_5169.JPG)](https://r4kclub.com/en/portfolio/category/17)\n\n#### [R4K at Phimai Vithaya School, Nakhon Ratchasima](https://r4kclub.com/en/portfolio/category/17)\n\n## News\n\nFollow our latest news and announcements here\n\n[![](https://r4kclub.com//storage/91/5fd7071cce51f_870x400_12.jpg)](https://r4kclub.com/en/articles/detail/2)\n\n#### [We are now open for donations for the purchase of materials needed for teaching and for student coach's tuition.](https://r4kclub.com/en/articles/detail/2)\n\n[Read more](https://r4kclub.com/en/articles/detail/2)","size_bytes":4921},"attached_assets/script_1756534726829.js":{"content":"// You can add more complex JavaScript animations or interactivity here later.\n// For the requested \"images popping up once hovered,\" CSS transitions are often more performant\n// and have been implemented in the CSS for the .news-item img.\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    console.log('ISB Medical Society website loaded!');\n    // Example of a simple JS interaction if needed:\n    // const newsItems = document.querySelectorAll('.news-item');\n    // newsItems.forEach(item => {\n    //     item.addEventListener('click', () => {\n    //         alert('You clicked on a news item!');\n    //     });\n    // });\n});","size_bytes":637},"attached_assets/style_1756534726829.css":{"content":":root {\n    --lightblue: #ADD8E6; /* Light Blue */\n    --white: #FFFFFF;\n    --darkgrey: #36454F; /* Dark Grey */\n    --text-color: #333;\n    --light-text: #f4f4f4;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Montserrat', sans-serif;\n    line-height: 1.6;\n    background-color: var(--white);\n    color: var(--text-color);\n}\n\n.container {\n    width: 90%;\n    max-width: 1200px;\n    margin: auto;\n    overflow: hidden;\n    padding: 20px 0;\n}\n\n/* Header */\n.main-header {\n    background-color: var(--darkgrey);\n    color: var(--white);\n    padding: 20px 0;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.main-header .container {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.logo {\n    font-size: 1.8em;\n    font-weight: 700;\n    color: var(--white);\n}\n\n.main-nav ul {\n    list-style: none;\n}\n\n.main-nav ul li {\n    display: inline-block;\n    margin-left: 20px;\n}\n\n.main-nav ul li a {\n    color: var(--white);\n    text-decoration: none;\n    font-weight: 600;\n    padding: 5px 10px;\n    transition: color 0.3s ease, background-color 0.3s ease;\n    border-radius: 5px;\n}\n\n.main-nav ul li a:hover,\n.main-nav ul li a.active {\n    color: var(--darkgrey);\n    background-color: var(--lightblue);\n}\n\n.hero-image {\n    background: url(\"images/poster.png\") no-repeat center center/cover;\n    height: 1080px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--white);\n    text-align: center;\n    position: relative;\n    overflow: hidden; /* To handle potential image pop-up overflow */\n}\n\n\n\n/* Mission Statement */\n.mission-statement {\n    background-color: var(--lightblue);\n    color: var(--darkgrey);\n    padding: 60px 0;\n    text-align: center;\n}\n\n.mission-statement h2 {\n    font-size: 2.5em;\n    margin-bottom: 20px;\n    color: var(--darkgrey);\n}\n\n.mission-statement p {\n    font-size: 1.2em;\n    max-width: 800px;\n    margin: 0 auto;\n    line-height: 1.8;\n}\n\n/* News Preview */\n.news-preview {\n    padding: 80px 0;\n    background-color: var(--white);\n    text-align: center;\n}\n\n.news-preview h2 {\n    font-size: 2.5em;\n    margin-bottom: 50px;\n    color: var(--darkgrey);\n}\n\n.news-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n    gap: 30px;\n}\n\n.news-item {\n    background-color: var(--white);\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 4px 10px rgba(0,0,0,0.1);\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    position: relative; /* For image hover effect */\n}\n\n.news-item:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 8px 20px rgba(0,0,0,0.2);\n}\n\n.news-item img {\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    display: block;\n    transition: transform 0.4s ease-in-out; /* Pop-up animation */\n}\n\n.news-item:hover img {\n    transform: scale(1.05);\n}\n\n.news-item h3 {\n    font-size: 1.5em;\n    margin: 20px 15px 10px;\n    color: var(--darkgrey);\n}\n\n.news-item p {\n    font-size: 1em;\n    margin: 0 15px 20px;\n    color: var(--text-color);\n}\n\n.news-item .read-more {\n    display: inline-block;\n    background-color: var(--lightblue);\n    color: var(--darkgrey);\n    padding: 10px 20px;\n    border-radius: 5px;\n    text-decoration: none;\n    font-weight: 600;\n    margin-bottom: 20px;\n    transition: background-color 0.3s ease, color 0.3s ease;\n}\n\n.news-item .read-more:hover {\n    background-color: var(--darkgrey);\n    color: var(--white);\n}\n\n/* Footer */\n.main-footer {\n    background-color: var(--darkgrey);\n    color: var(--light-text);\n    text-align: center;\n    padding: 40px 0;\n    margin-top: 50px; /* To separate from the news section */\n}\n\n.main-footer p {\n    font-size: 0.9em;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .main-header .container {\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .main-nav ul {\n        margin-top: 15px;\n    }\n\n    .main-nav ul li {\n        margin: 0 10px;\n    }\n\n    .news-grid {\n        grid-template-columns: 1fr;\n    }\n}","size_bytes":4068},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\n// Serve static uploaded images\napp.use('/uploads', express.static('public/uploads'));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2186},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertProgramSchema, insertNewsSchema, insertMemberSchema, insertMemberClassSchema, insertHeroImageSchema, insertAdminUserSchema } from \"../shared/schema\";\nimport { processImage, cleanupOldImages } from \"./imageProcessor\";\nimport { randomUUID } from 'crypto';\nimport { sendContactEmail } from \"./email\";\nimport session from 'express-session';\nimport connectPgSimple from 'connect-pg-simple';\nimport { pool } from './db';\nimport { z } from \"zod\";\nimport cors from 'cors';\nimport helmet from 'helmet';\n\n// Simple authentication middleware\nconst isAuthenticated = (req: any, res: any, next: any) => {\n  if (req.session && (req.session as any).isAuthenticated) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Authentication required\" });\n};\n\n// Simple admin check middleware\nconst isAdmin = (req: any, res: any, next: any) => {\n  if (req.session && (req.session as any).isAuthenticated && (req.session as any).isAdmin) {\n    return next();\n  }\n  return res.status(403).json({ message: \"Admin access required\" });\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.get('/health', (_req, res) => {\n    res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() });\n  });\n\n  app.use(helmet({\n    contentSecurityPolicy: process.env.NODE_ENV === 'production' ? undefined : false,\n    crossOriginEmbedderPolicy: false\n  }));\n\n  // CORS middleware\n  const allowedOrigins = process.env.FRONTEND_URL ? [process.env.FRONTEND_URL] : [];\n  if (process.env.NODE_ENV === 'development') {\n    allowedOrigins.push('http://localhost:5000', 'http://localhost:5173');\n  }\n\n  app.use(cors({\n    origin: allowedOrigins.length > 0 ? allowedOrigins : true,\n    credentials: true\n  }));\n\n  // Setup session middleware\n  app.set(\"trust proxy\", 1);\n  \n  const PgStore = connectPgSimple(session);\n  app.use(session({\n    store: new PgStore({ pool, tableName: 'sessions' }),\n    secret: process.env.SESSION_SECRET || 'dev-secret-change-in-production',\n    resave: false,\n    saveUninitialized: false,\n    cookie: { \n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 7 * 24 * 60 * 60 * 1000\n    }\n  }));\n\n  // Simple login route\n  const loginSchema = z.object({\n    username: z.string(),\n    password: z.string(),\n  });\n\n  app.post('/api/login', async (req, res) => {\n    try {\n      const { username, password } = loginSchema.parse(req.body);\n      \n      // Check hardcoded credentials\n      if (username === 'admin' && password === 'password') {\n        (req.session as any).isAuthenticated = true;\n        (req.session as any).isAdmin = true;\n        (req.session as any).user = {\n          id: 'admin',\n          username: 'admin',\n          role: 'admin'\n        };\n        res.json({ message: \"Login successful\" });\n      } else {\n        res.status(401).json({ message: \"Invalid username or password\" });\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid request data\" });\n    }\n  });\n\n  // Logout route\n  app.post('/api/logout', (req, res) => {\n    req.session.destroy(() => {\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Auth status route\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    res.json((req.session as any).user);\n  });\n\n  // Check if user is admin\n  app.get('/api/auth/admin', isAuthenticated, async (req: any, res) => {\n    res.json({ \n      isAdmin: (req.session as any).isAdmin || false, \n      adminUser: (req.session as any).isAdmin ? { \n        id: 'admin',\n        role: 'admin' \n      } : null \n    });\n  });\n  // Programs routes\n  app.get(\"/api/programs\", async (req, res) => {\n    try {\n      const programs = await storage.getPrograms();\n      res.json(programs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch programs\" });\n    }\n  });\n\n  app.get(\"/api/programs/:id\", async (req, res) => {\n    try {\n      const program = await storage.getProgram(req.params.id);\n      if (!program) {\n        return res.status(404).json({ message: \"Program not found\" });\n      }\n      res.json(program);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch program\" });\n    }\n  });\n\n  app.post(\"/api/programs\", async (req, res) => {\n    try {\n      const validatedData = insertProgramSchema.parse(req.body);\n      const program = await storage.createProgram(validatedData);\n      res.status(201).json(program);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid program data\" });\n    }\n  });\n\n  // News routes\n  app.get(\"/api/news\", async (req, res) => {\n    try {\n      const news = await storage.getNews();\n      res.json(news);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch news\" });\n    }\n  });\n\n  app.get(\"/api/news/:id\", async (req, res) => {\n    try {\n      const newsItem = await storage.getNewsItem(req.params.id);\n      if (!newsItem) {\n        return res.status(404).json({ message: \"News item not found\" });\n      }\n      res.json(newsItem);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch news item\" });\n    }\n  });\n\n  app.post(\"/api/news\", async (req, res) => {\n    try {\n      const validatedData = insertNewsSchema.parse(req.body);\n      const news = await storage.createNews(validatedData);\n      res.status(201).json(news);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid news data\" });\n    }\n  });\n\n  // Member classes routes (public)\n  app.get(\"/api/member-classes\", async (req, res) => {\n    try {\n      const memberClasses = await storage.getMemberClasses();\n      res.json(memberClasses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch member classes\" });\n    }\n  });\n\n  // Members routes (public)\n  app.get(\"/api/members\", async (req, res) => {\n    try {\n      const members = await storage.getMembers();\n      res.json(members);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch members\" });\n    }\n  });\n\n  // Hero images routes (public)\n  app.get(\"/api/hero-images\", async (req, res) => {\n    try {\n      const heroImages = await storage.getHeroImages();\n      res.json(heroImages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hero images\" });\n    }\n  });\n\n  // Contact form route\n  const contactFormSchema = z.object({\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    email: z.string().email(\"Valid email is required\"),\n    grade: z.string().optional(),\n    subject: z.string().min(1, \"Subject is required\"),\n    message: z.string().min(1, \"Message is required\"),\n  });\n\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = contactFormSchema.parse(req.body);\n      const success = await sendContactEmail(validatedData);\n      \n      if (success) {\n        res.json({ message: \"Email sent successfully\" });\n      } else {\n        res.status(500).json({ message: \"Failed to send email\" });\n      }\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid form data\" });\n    }\n  });\n\n  // Admin-only routes\n\n  // Member classes management routes\n  app.get(\"/api/admin/member-classes\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const memberClasses = await storage.getMemberClasses();\n      res.json(memberClasses);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch member classes\" });\n    }\n  });\n\n  app.post(\"/api/admin/member-classes\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertMemberClassSchema.parse(req.body);\n      const memberClass = await storage.createMemberClass(validatedData);\n      res.status(201).json(memberClass);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid member class data\" });\n    }\n  });\n\n  app.put(\"/api/admin/member-classes/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertMemberClassSchema.partial().parse(req.body);\n      const memberClass = await storage.updateMemberClass(req.params.id, validatedData);\n      res.json(memberClass);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update member class\" });\n    }\n  });\n\n  app.delete(\"/api/admin/member-classes/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteMemberClass(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete member class\" });\n    }\n  });\n\n  // Members management routes\n  app.get(\"/api/admin/members\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const members = await storage.getMembers();\n      res.json(members);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch members\" });\n    }\n  });\n\n  app.post(\"/api/admin/members\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertMemberSchema.parse(req.body);\n      \n      // Get member class to determine validation rules\n      const memberClass = await storage.getMemberClass(validatedData.memberClassId!);\n      if (!memberClass) {\n        return res.status(400).json({ message: \"Invalid member class\" });\n      }\n      \n      // Apply conditional validation based on member class\n      if (memberClass.name === \"Active Member\") {\n        // Active Members only need name - role is optional\n        validatedData.role = null;\n        \n        // Process image if provided for Active Members too\n        if (validatedData.image) {\n          const memberId = randomUUID();\n          const processedImages = await processImage(validatedData.image, memberId);\n          \n          // Store the base64 data URLs\n          validatedData.image = processedImages.original;\n          (validatedData as any).thumbnail = processedImages.thumbnail;\n        }\n      } else {\n        // Other classes need name and role (image is optional)\n        if (!validatedData.role?.trim()) {\n          return res.status(400).json({ message: \"Role is required for \" + memberClass.name });\n        }\n        \n        // Process image if provided\n        if (validatedData.image) {\n          const memberId = randomUUID();\n          const processedImages = await processImage(validatedData.image, memberId);\n          \n          // Store the base64 data URLs\n          validatedData.image = processedImages.original;\n          (validatedData as any).thumbnail = processedImages.thumbnail;\n        }\n      }\n      \n      const member = await storage.createMember(validatedData);\n      res.status(201).json(member);\n    } catch (error) {\n      console.error(\"Member creation error:\", error);\n      res.status(400).json({ message: \"Invalid member data\" });\n    }\n  });\n\n  app.put(\"/api/admin/members/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertMemberSchema.partial().parse(req.body);\n      \n      // Get the current member to determine class if not being changed\n      const currentMember = await storage.getMember(req.params.id);\n      if (!currentMember) {\n        return res.status(404).json({ message: \"Member not found\" });\n      }\n      \n      // Use provided memberClassId or current member's class\n      const targetClassId = validatedData.memberClassId || currentMember.memberClassId;\n      \n      if (targetClassId) {\n        const memberClass = await storage.getMemberClass(targetClassId);\n        if (!memberClass) {\n          return res.status(400).json({ message: \"Invalid member class\" });\n        }\n        \n        if (memberClass.name === \"Active Member\") {\n          // Active Members only need name - role is optional\n          validatedData.role = null;\n          \n          // Process new image if provided for Active Members too\n          if (validatedData.image && validatedData.image.startsWith('data:')) {\n            // Clean up old images first (no-op for base64 images)\n            if (currentMember.image) {\n              await cleanupOldImages(currentMember.image, currentMember.thumbnail || '');\n            }\n            \n            const processedImages = await processImage(validatedData.image, req.params.id);\n            \n            // Store the base64 data URLs\n            validatedData.image = processedImages.original;\n            (validatedData as any).thumbnail = processedImages.thumbnail;\n          }\n        } else {\n          // Other classes need name and role (image is optional)\n          if (validatedData.role !== undefined && !validatedData.role?.trim()) {\n            return res.status(400).json({ message: \"Role is required for \" + memberClass.name });\n          }\n          \n          // Process new image if provided\n          if (validatedData.image && validatedData.image.startsWith('data:')) {\n            // Clean up old images first (no-op for base64 images)\n            if (currentMember.image) {\n              await cleanupOldImages(currentMember.image, currentMember.thumbnail || '');\n            }\n            \n            const processedImages = await processImage(validatedData.image, req.params.id);\n            \n            // Store the base64 data URLs\n            validatedData.image = processedImages.original;\n            (validatedData as any).thumbnail = processedImages.thumbnail;\n          }\n        }\n      }\n      \n      \n      const member = await storage.updateMember(req.params.id, validatedData);\n      res.json(member);\n    } catch (error) {\n      console.error(\"Member update error:\", error);\n      res.status(400).json({ message: \"Failed to update member\" });\n    }\n  });\n\n  app.delete(\"/api/admin/members/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteMember(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete member\" });\n    }\n  });\n\n  // Hero images management routes\n  app.get(\"/api/admin/hero-images\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const heroImages = await storage.getHeroImages();\n      res.json(heroImages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch hero images\" });\n    }\n  });\n\n  app.post(\"/api/admin/hero-images\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertHeroImageSchema.parse(req.body);\n      const heroImage = await storage.createHeroImage(validatedData);\n      res.status(201).json(heroImage);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid hero image data\" });\n    }\n  });\n\n  app.put(\"/api/admin/hero-images/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertHeroImageSchema.partial().parse(req.body);\n      const heroImage = await storage.updateHeroImage(req.params.id, validatedData);\n      res.json(heroImage);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update hero image\" });\n    }\n  });\n\n  app.delete(\"/api/admin/hero-images/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteHeroImage(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete hero image\" });\n    }\n  });\n\n  // Admin news management routes\n  app.get(\"/api/admin/news\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const news = await storage.getNews();\n      res.json(news);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch news\" });\n    }\n  });\n\n  app.post(\"/api/admin/news\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertNewsSchema.parse(req.body);\n      const news = await storage.createNews(validatedData);\n      res.status(201).json(news);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid news data\" });\n    }\n  });\n\n  app.put(\"/api/admin/news/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      const validatedData = insertNewsSchema.partial().parse(req.body);\n      const news = await storage.updateNews(req.params.id, validatedData);\n      res.json(news);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update news\" });\n    }\n  });\n\n  app.delete(\"/api/admin/news/:id\", isAuthenticated, isAdmin, async (req, res) => {\n    try {\n      await storage.deleteNews(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete news\" });\n    }\n  });\n\n  // Published news route for public access\n  app.get(\"/api/news/published\", async (req, res) => {\n    try {\n      const news = await storage.getPublishedNews();\n      res.json(news);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch published news\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17090},"server/storage.ts":{"content":"import { \n  type User, type UpsertUser,\n  type Program, type InsertProgram, \n  type News, type InsertNews,\n  type Member, type InsertMember,\n  type MemberClass, type InsertMemberClass,\n  type AdminUser, type InsertAdminUser,\n  type HeroImage, type InsertHeroImage,\n  users, adminUsers, memberClasses, members, heroImages, programs, news\n} from \"../shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (Replit Auth compatible)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Admin user operations\n  getAdminUser(userId: string): Promise<AdminUser | undefined>;\n  createAdminUser(adminUser: InsertAdminUser): Promise<AdminUser>;\n  updateAdminUser(id: string, adminUser: Partial<InsertAdminUser>): Promise<AdminUser>;\n  deleteAdminUser(id: string): Promise<void>;\n  \n  // Member class operations\n  getMemberClasses(): Promise<MemberClass[]>;\n  getMemberClass(id: string): Promise<MemberClass | undefined>;\n  createMemberClass(memberClass: InsertMemberClass): Promise<MemberClass>;\n  updateMemberClass(id: string, memberClass: Partial<InsertMemberClass>): Promise<MemberClass>;\n  deleteMemberClass(id: string): Promise<void>;\n  \n  // Member operations\n  getMembers(): Promise<Member[]>;\n  getMember(id: string): Promise<Member | undefined>;\n  createMember(member: InsertMember): Promise<Member>;\n  updateMember(id: string, member: Partial<InsertMember>): Promise<Member>;\n  deleteMember(id: string): Promise<void>;\n  \n  // Hero image operations\n  getHeroImages(): Promise<HeroImage[]>;\n  getHeroImage(id: string): Promise<HeroImage | undefined>;\n  createHeroImage(heroImage: InsertHeroImage): Promise<HeroImage>;\n  updateHeroImage(id: string, heroImage: Partial<InsertHeroImage>): Promise<HeroImage>;\n  deleteHeroImage(id: string): Promise<void>;\n  \n  // Program operations\n  getPrograms(): Promise<Program[]>;\n  getProgram(id: string): Promise<Program | undefined>;\n  createProgram(program: InsertProgram): Promise<Program>;\n  updateProgram(id: string, program: Partial<InsertProgram>): Promise<Program>;\n  deleteProgram(id: string): Promise<void>;\n  \n  // News operations\n  getNews(): Promise<News[]>;\n  getNewsItem(id: string): Promise<News | undefined>;\n  createNews(news: InsertNews): Promise<News>;\n  updateNews(id: string, news: Partial<InsertNews>): Promise<News>;\n  deleteNews(id: string): Promise<void>;\n  getPublishedNews(): Promise<News[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private adminUsers: Map<string, AdminUser>;\n  private memberClasses: Map<string, MemberClass>;\n  private members: Map<string, Member>;\n  private heroImages: Map<string, HeroImage>;\n  private programs: Map<string, Program>;\n  private news: Map<string, News>;\n\n  constructor() {\n    this.users = new Map();\n    this.adminUsers = new Map();\n    this.memberClasses = new Map();\n    this.members = new Map();\n    this.heroImages = new Map();\n    this.programs = new Map();\n    this.news = new Map();\n    \n    // Initialize with default data\n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Default member classes\n    const defaultMemberClasses: MemberClass[] = [\n      {\n        id: \"website-manager\",\n        name: \"Website Manager\",\n        description: \"Manages the website and digital presence\",\n        displayOrder: 1,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"officer\",\n        name: \"Officer\",\n        description: \"Executive leadership positions\",\n        displayOrder: 2,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"active-member\",\n        name: \"Active Member\",\n        description: \"Regular participating members\",\n        displayOrder: 3,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"faculty-advisors\",\n        name: \"Faculty Advisors\",\n        description: \"Faculty members providing guidance\",\n        displayOrder: 4,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    defaultMemberClasses.forEach(memberClass => this.memberClasses.set(memberClass.id, memberClass));\n\n    // Default programs\n    const defaultPrograms: Program[] = [\n      {\n        id: \"clinical-skills\",\n        title: \"Clinical Skills Workshop\",\n        subtitle: \"First on the scene\",\n        description: \"Hands-on training in basic medical procedures and patient care techniques.\",\n        image: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        createdAt: new Date()\n      },\n      {\n        id: \"disease-awareness\",\n        title: \"Disease Awareness Campaigns\",\n        subtitle: \"Fundraising events\",\n        description: \"Initiatives to raise funds for hospitals.\",\n        image: \"https://images.unsplash.com/photo-1559757175-0eb30cd8c063?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        createdAt: new Date()\n      },\n      {\n        id: \"hospital-volunteering\",\n        title: \"Hospital Volunteering\",\n        subtitle: \"Donation & charity\",\n        description: \"Donations to charitable organizations or hospitals.\",\n        image: \"https://images.unsplash.com/photo-1576091160550-2173dba999ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        createdAt: new Date()\n      },\n      {\n        id: \"medical-research\",\n        title: \"Medical Research Projects\",\n        subtitle: \"Social media page\",\n        description: \"Student-made short videos exploring current medical topics, with the aim to improve public health.\",\n        image: \"https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\",\n        createdAt: new Date()\n      }\n    ];\n\n    defaultPrograms.forEach(program => this.programs.set(program.id, program));\n\n    // Default members\n    const defaultMembers: Member[] = [\n      {\n        id: \"member-1\",\n        name: \"Sarah Johnson\",\n        role: \"President\",\n        memberClassId: \"officer\",\n        bio: \"Passionate about global health equity and medical education.\",\n        image: \"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        thumbnail: null,\n        linkedIn: null,\n        year: \"Grade 12\",\n        isActive: true,\n        displayOrder: 1,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"member-2\",\n        name: \"Alex Chen\",\n        role: \"Vice President\",\n        memberClassId: \"officer\",\n        bio: \"Leading initiatives in medical research and community outreach.\",\n        image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        thumbnail: null,\n        linkedIn: null,\n        year: \"Grade 12\",\n        isActive: true,\n        displayOrder: 2,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    defaultMembers.forEach(member => this.members.set(member.id, member));\n\n    // Default hero images\n    const defaultHeroImages: HeroImage[] = [\n      {\n        id: \"hero-1\",\n        title: \"First Aid Training Certification\",\n        description: \"ISB Medical Society members completing their first aid certification\",\n        imageUrl: \"/assets/97ccae24-4d7b-48c9-a16e-40476198cbd1_1758466251232.png\",\n        altText: \"ISB Medical Society - First Aid Training Certification Group\",\n        displayOrder: 1,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"hero-2\",\n        title: \"Hospital Community Outreach\",\n        description: \"Members visiting local hospitals for community outreach programs\",\n        imageUrl: \"/assets/e5a0817e-1bad-4a67-bc34-45225337e332_1758466243134.png\",\n        altText: \"ISB Medical Society - Hospital Community Outreach\",\n        displayOrder: 2,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"hero-3\",\n        title: \"Health Education Programs\",\n        description: \"Educational workshops and health awareness campaigns\",\n        imageUrl: \"/assets/16fd4d4d-d0b8-481f-821d-9d4b8ccae2f6_1758466251232.png\",\n        altText: \"ISB Medical Society - Health Education Programs\",\n        displayOrder: 3,\n        isActive: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    defaultHeroImages.forEach(heroImage => this.heroImages.set(heroImage.id, heroImage));\n\n    // Default news\n    const defaultNews: News[] = [\n      {\n        id: \"health-fair-2024\",\n        category: \"Health Fair 2024\",\n        title: \"Annual Health Fair Success\",\n        description: \"Our 2024 Health Fair attracted over 500 participants, providing free health screenings and medical consultations to the community.\",\n        content: \"The ISB Medical Society successfully hosted its annual Health Fair, welcoming over 500 community members for comprehensive health screenings and medical consultations. The event featured blood pressure monitoring, diabetes screening, and nutritional counseling, all provided free of charge by our volunteer medical professionals.\",\n        image: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\",\n        isPublished: true,\n        publishDate: new Date(),\n        authorId: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      },\n      {\n        id: \"global-health-initiative\",\n        category: \"Global Health Initiative\",\n        title: \"New Partnership Announced\",\n        description: \"MedSo partners with international healthcare organizations to expand our global health advocacy programs.\",\n        content: \"We are excited to announce our new partnership with several international healthcare organizations. This collaboration will enhance our global health advocacy programs and provide our members with unprecedented opportunities to engage in worldwide health initiatives.\",\n        image: \"https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\",\n        isPublished: true,\n        publishDate: new Date(),\n        authorId: null,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      }\n    ];\n\n    defaultNews.forEach(news => this.news.set(news.id, news));\n  }\n\n  // User operations (Replit Auth compatible)\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const existingUser = this.users.get(userData.id!);\n    const user: User = {\n      id: userData.id!,\n      email: userData.email ?? null,\n      firstName: userData.firstName ?? null,\n      lastName: userData.lastName ?? null,\n      profileImageUrl: userData.profileImageUrl ?? null,\n      createdAt: existingUser?.createdAt || new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(user.id, user);\n    return user;\n  }\n\n  // Admin user operations\n  async getAdminUser(userId: string): Promise<AdminUser | undefined> {\n    return Array.from(this.adminUsers.values()).find(admin => admin.userId === userId);\n  }\n\n  async createAdminUser(insertAdminUser: InsertAdminUser): Promise<AdminUser> {\n    const id = randomUUID();\n    const adminUser: AdminUser = {\n      id,\n      userId: insertAdminUser.userId,\n      role: insertAdminUser.role ?? \"admin\",\n      permissions: insertAdminUser.permissions ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.adminUsers.set(id, adminUser);\n    return adminUser;\n  }\n\n  async updateAdminUser(id: string, updateData: Partial<InsertAdminUser>): Promise<AdminUser> {\n    const existing = this.adminUsers.get(id);\n    if (!existing) throw new Error(\"Admin user not found\");\n    \n    const updated: AdminUser = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.adminUsers.set(id, updated);\n    return updated;\n  }\n\n  async deleteAdminUser(id: string): Promise<void> {\n    this.adminUsers.delete(id);\n  }\n\n  // Member class operations\n  async getMemberClasses(): Promise<MemberClass[]> {\n    return Array.from(this.memberClasses.values()).sort((a, b) => (a.displayOrder ?? 0) - (b.displayOrder ?? 0));\n  }\n\n  async getMemberClass(id: string): Promise<MemberClass | undefined> {\n    return this.memberClasses.get(id);\n  }\n\n  async createMemberClass(insertMemberClass: InsertMemberClass): Promise<MemberClass> {\n    const id = randomUUID();\n    const memberClass: MemberClass = {\n      id,\n      name: insertMemberClass.name,\n      description: insertMemberClass.description ?? null,\n      displayOrder: insertMemberClass.displayOrder ?? 0,\n      isActive: insertMemberClass.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.memberClasses.set(id, memberClass);\n    return memberClass;\n  }\n\n  async updateMemberClass(id: string, updateData: Partial<InsertMemberClass>): Promise<MemberClass> {\n    const existing = this.memberClasses.get(id);\n    if (!existing) throw new Error(\"Member class not found\");\n    \n    const updated: MemberClass = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.memberClasses.set(id, updated);\n    return updated;\n  }\n\n  async deleteMemberClass(id: string): Promise<void> {\n    this.memberClasses.delete(id);\n  }\n\n  // Member operations\n  async getMembers(): Promise<Member[]> {\n    return Array.from(this.members.values()).sort((a, b) => (a.displayOrder ?? 0) - (b.displayOrder ?? 0));\n  }\n\n  async getMember(id: string): Promise<Member | undefined> {\n    return this.members.get(id);\n  }\n\n  async createMember(insertMember: InsertMember): Promise<Member> {\n    const id = randomUUID();\n    const member: Member = {\n      id,\n      name: insertMember.name,\n      role: insertMember.role || null,\n      memberClassId: insertMember.memberClassId || null,\n      bio: insertMember.bio || null,\n      image: insertMember.image ?? null,\n      thumbnail: insertMember.thumbnail ?? null,\n      linkedIn: insertMember.linkedIn ?? null,\n      year: insertMember.year ?? null,\n      isActive: insertMember.isActive ?? true,\n      displayOrder: insertMember.displayOrder ?? 0,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.members.set(id, member);\n    return member;\n  }\n\n  async updateMember(id: string, updateData: Partial<InsertMember>): Promise<Member> {\n    const existing = this.members.get(id);\n    if (!existing) throw new Error(\"Member not found\");\n    \n    const updated: Member = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.members.set(id, updated);\n    return updated;\n  }\n\n  async deleteMember(id: string): Promise<void> {\n    this.members.delete(id);\n  }\n\n  // Hero image operations\n  async getHeroImages(): Promise<HeroImage[]> {\n    return Array.from(this.heroImages.values()).sort((a, b) => (a.displayOrder ?? 0) - (b.displayOrder ?? 0));\n  }\n\n  async getHeroImage(id: string): Promise<HeroImage | undefined> {\n    return this.heroImages.get(id);\n  }\n\n  async createHeroImage(insertHeroImage: InsertHeroImage): Promise<HeroImage> {\n    const id = randomUUID();\n    const heroImage: HeroImage = {\n      id,\n      title: insertHeroImage.title,\n      description: insertHeroImage.description ?? null,\n      imageUrl: insertHeroImage.imageUrl,\n      altText: insertHeroImage.altText,\n      displayOrder: insertHeroImage.displayOrder ?? 0,\n      isActive: insertHeroImage.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.heroImages.set(id, heroImage);\n    return heroImage;\n  }\n\n  async updateHeroImage(id: string, updateData: Partial<InsertHeroImage>): Promise<HeroImage> {\n    const existing = this.heroImages.get(id);\n    if (!existing) throw new Error(\"Hero image not found\");\n    \n    const updated: HeroImage = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.heroImages.set(id, updated);\n    return updated;\n  }\n\n  async deleteHeroImage(id: string): Promise<void> {\n    this.heroImages.delete(id);\n  }\n\n  async getPrograms(): Promise<Program[]> {\n    return Array.from(this.programs.values());\n  }\n\n  async getProgram(id: string): Promise<Program | undefined> {\n    return this.programs.get(id);\n  }\n\n  async createProgram(insertProgram: InsertProgram): Promise<Program> {\n    const id = randomUUID();\n    const program: Program = { \n      ...insertProgram, \n      id, \n      createdAt: new Date() \n    };\n    this.programs.set(id, program);\n    return program;\n  }\n\n  async updateProgram(id: string, updateData: Partial<InsertProgram>): Promise<Program> {\n    const existing = this.programs.get(id);\n    if (!existing) throw new Error(\"Program not found\");\n    \n    const updated: Program = {\n      ...existing,\n      ...updateData,\n    };\n    this.programs.set(id, updated);\n    return updated;\n  }\n\n  async deleteProgram(id: string): Promise<void> {\n    this.programs.delete(id);\n  }\n\n  async getNews(): Promise<News[]> {\n    return Array.from(this.news.values());\n  }\n\n  async getNewsItem(id: string): Promise<News | undefined> {\n    return this.news.get(id);\n  }\n\n  async createNews(insertNews: InsertNews): Promise<News> {\n    const id = randomUUID();\n    const news: News = {\n      id,\n      category: insertNews.category,\n      title: insertNews.title,\n      description: insertNews.description,\n      content: insertNews.content ?? null,\n      image: insertNews.image,\n      isPublished: insertNews.isPublished ?? false,\n      publishDate: insertNews.publishDate ?? null,\n      authorId: insertNews.authorId ?? null,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.news.set(id, news);\n    return news;\n  }\n\n  async updateNews(id: string, updateData: Partial<InsertNews>): Promise<News> {\n    const existing = this.news.get(id);\n    if (!existing) throw new Error(\"News not found\");\n    \n    const updated: News = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.news.set(id, updated);\n    return updated;\n  }\n\n  async deleteNews(id: string): Promise<void> {\n    this.news.delete(id);\n  }\n\n  async getPublishedNews(): Promise<News[]> {\n    return Array.from(this.news.values())\n      .filter(news => news.isPublished)\n      .sort((a, b) => (b.publishDate || b.createdAt)!.getTime() - (a.publishDate || a.createdAt)!.getTime());\n  }\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize with default data on first run\n    this.initializeDefaultData();\n  }\n\n  private async initializeDefaultData() {\n    // Check if we already have data\n    const existingClasses = await db.select().from(memberClasses).limit(1);\n    if (existingClasses.length > 0) return; // Already initialized\n\n    // Default member classes\n    const defaultMemberClasses = [\n      {\n        id: \"website-manager\",\n        name: \"Website Manager\",\n        description: \"Manages the website and digital presence\",\n        displayOrder: 1,\n        isActive: true\n      },\n      {\n        id: \"officer\",\n        name: \"Officer\",\n        description: \"Executive leadership positions\",\n        displayOrder: 2,\n        isActive: true\n      },\n      {\n        id: \"active-member\",\n        name: \"Active Member\",\n        description: \"Regular participating members\",\n        displayOrder: 3,\n        isActive: true\n      },\n      {\n        id: \"faculty-advisors\",\n        name: \"Faculty Advisors\",\n        description: \"Faculty members providing guidance\",\n        displayOrder: 4,\n        isActive: true\n      }\n    ];\n\n    await db.insert(memberClasses).values(defaultMemberClasses).onConflictDoNothing();\n\n    // Default programs\n    const defaultPrograms = [\n      {\n        id: \"clinical-skills\",\n        title: \"Clinical Skills Workshop\",\n        subtitle: \"First on the scene\",\n        description: \"Hands-on training in basic medical procedures and patient care techniques.\",\n        image: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        id: \"disease-awareness\",\n        title: \"Disease Awareness Campaigns\",\n        subtitle: \"Fundraising events\",\n        description: \"Initiatives to raise funds for hospitals.\",\n        image: \"https://images.unsplash.com/photo-1559757175-0eb30cd8c063?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        id: \"hospital-volunteering\",\n        title: \"Hospital Volunteering\",\n        subtitle: \"Donation & charity\",\n        description: \"Donations to charitable organizations or hospitals.\",\n        image: \"https://images.unsplash.com/photo-1576091160550-2173dba999ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      },\n      {\n        id: \"medical-research\",\n        title: \"Medical Research Projects\",\n        subtitle: \"Social media page\",\n        description: \"Student-made short videos exploring current medical topics, with the aim to improve public health.\",\n        image: \"https://images.unsplash.com/photo-1582719478250-c89cae4dc85b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=250\"\n      }\n    ];\n\n    await db.insert(programs).values(defaultPrograms).onConflictDoNothing();\n\n    // Default members\n    const defaultMembers = [\n      {\n        id: \"member-1\",\n        name: \"Sarah Johnson\",\n        role: \"President\",\n        memberClassId: \"officer\",\n        bio: \"Passionate about global health equity and medical education.\",\n        image: \"https://images.unsplash.com/photo-1559839734-2b71ea197ec2?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        thumbnail: null,\n        linkedIn: null,\n        year: \"Grade 12\",\n        isActive: true,\n        displayOrder: 1\n      },\n      {\n        id: \"member-2\",\n        name: \"Alex Chen\",\n        role: \"Vice President\",\n        memberClassId: \"officer\",\n        bio: \"Leading initiatives in medical research and community outreach.\",\n        image: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\",\n        thumbnail: null,\n        linkedIn: null,\n        year: \"Grade 12\",\n        isActive: true,\n        displayOrder: 2\n      }\n    ];\n\n    await db.insert(members).values(defaultMembers).onConflictDoNothing();\n\n    // Default hero images\n    const defaultHeroImages = [\n      {\n        id: \"hero-1\",\n        title: \"First Aid Training Certification\",\n        description: \"ISB Medical Society members completing their first aid certification\",\n        imageUrl: \"/assets/97ccae24-4d7b-48c9-a16e-40476198cbd1_1758466251232.png\",\n        altText: \"ISB Medical Society - First Aid Training Certification Group\",\n        displayOrder: 1,\n        isActive: true\n      },\n      {\n        id: \"hero-2\",\n        title: \"Hospital Community Outreach\",\n        description: \"Members visiting local hospitals for community outreach programs\",\n        imageUrl: \"/assets/e5a0817e-1bad-4a67-bc34-45225337e332_1758466243134.png\",\n        altText: \"ISB Medical Society - Hospital Community Outreach\",\n        displayOrder: 2,\n        isActive: true\n      },\n      {\n        id: \"hero-3\",\n        title: \"Health Education Programs\",\n        description: \"Educational workshops and health awareness campaigns\",\n        imageUrl: \"/assets/16fd4d4d-d0b8-481f-821d-9d4b8ccae2f6_1758466251232.png\",\n        altText: \"ISB Medical Society - Health Education Programs\",\n        displayOrder: 3,\n        isActive: true\n      }\n    ];\n\n    await db.insert(heroImages).values(defaultHeroImages).onConflictDoNothing();\n\n    // Default news\n    const defaultNews = [\n      {\n        id: \"health-fair-2024\",\n        category: \"Health Fair 2024\",\n        title: \"Annual Health Fair Success\",\n        description: \"Our 2024 Health Fair attracted over 500 participants, providing free health screenings and medical consultations to the community.\",\n        content: \"The ISB Medical Society successfully hosted its annual Health Fair, welcoming over 500 community members for comprehensive health screenings and medical consultations. The event featured blood pressure monitoring, diabetes screening, and nutritional counseling, all provided free of charge by our volunteer medical professionals.\",\n        image: \"https://images.unsplash.com/photo-1559757148-5c350d0d3c56?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\",\n        isPublished: true,\n        publishDate: new Date(),\n        authorId: null\n      },\n      {\n        id: \"global-health-initiative\",\n        category: \"Global Health Initiative\",\n        title: \"New Partnership Announced\",\n        description: \"MedSo partners with international healthcare organizations to expand our global health advocacy programs.\",\n        content: \"We are excited to announce our new partnership with several international healthcare organizations. This collaboration will enhance our global health advocacy programs and provide our members with unprecedented opportunities to engage in worldwide health initiatives.\",\n        image: \"https://images.unsplash.com/photo-1612349317150-e413f6a5b16d?ixlib=rb-4.0.3&auto=format&fit=crop&w=600&h=300\",\n        isPublished: true,\n        publishDate: new Date(),\n        authorId: null\n      }\n    ];\n\n    await db.insert(news).values(defaultNews).onConflictDoNothing();\n  }\n\n  // User operations (Replit Auth compatible)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        id: userData.id!,\n        email: userData.email ?? null,\n        firstName: userData.firstName ?? null,\n        lastName: userData.lastName ?? null,\n        profileImageUrl: userData.profileImageUrl ?? null,\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: userData.email ?? null,\n          firstName: userData.firstName ?? null,\n          lastName: userData.lastName ?? null,\n          profileImageUrl: userData.profileImageUrl ?? null,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Admin user operations\n  async getAdminUser(userId: string): Promise<AdminUser | undefined> {\n    const [adminUser] = await db.select().from(adminUsers).where(eq(adminUsers.userId, userId));\n    return adminUser || undefined;\n  }\n\n  async createAdminUser(insertAdminUser: InsertAdminUser): Promise<AdminUser> {\n    const [adminUser] = await db.insert(adminUsers).values(insertAdminUser).returning();\n    return adminUser;\n  }\n\n  async updateAdminUser(id: string, updateData: Partial<InsertAdminUser>): Promise<AdminUser> {\n    const [adminUser] = await db\n      .update(adminUsers)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(adminUsers.id, id))\n      .returning();\n    return adminUser;\n  }\n\n  async deleteAdminUser(id: string): Promise<void> {\n    await db.delete(adminUsers).where(eq(adminUsers.id, id));\n  }\n\n  // Member class operations\n  async getMemberClasses(): Promise<MemberClass[]> {\n    return await db.select().from(memberClasses).orderBy(memberClasses.displayOrder);\n  }\n\n  async getMemberClass(id: string): Promise<MemberClass | undefined> {\n    const [memberClass] = await db.select().from(memberClasses).where(eq(memberClasses.id, id));\n    return memberClass || undefined;\n  }\n\n  async createMemberClass(insertMemberClass: InsertMemberClass): Promise<MemberClass> {\n    const [memberClass] = await db.insert(memberClasses).values(insertMemberClass).returning();\n    return memberClass;\n  }\n\n  async updateMemberClass(id: string, updateData: Partial<InsertMemberClass>): Promise<MemberClass> {\n    const [memberClass] = await db\n      .update(memberClasses)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(memberClasses.id, id))\n      .returning();\n    return memberClass;\n  }\n\n  async deleteMemberClass(id: string): Promise<void> {\n    await db.delete(memberClasses).where(eq(memberClasses.id, id));\n  }\n\n  // Member operations\n  async getMembers(): Promise<Member[]> {\n    return await db.select().from(members).orderBy(members.displayOrder);\n  }\n\n  async getMember(id: string): Promise<Member | undefined> {\n    const [member] = await db.select().from(members).where(eq(members.id, id));\n    return member || undefined;\n  }\n\n  async createMember(insertMember: InsertMember): Promise<Member> {\n    const [member] = await db.insert(members).values(insertMember).returning();\n    return member;\n  }\n\n  async updateMember(id: string, updateData: Partial<InsertMember>): Promise<Member> {\n    const [member] = await db\n      .update(members)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(members.id, id))\n      .returning();\n    return member;\n  }\n\n  async deleteMember(id: string): Promise<void> {\n    await db.delete(members).where(eq(members.id, id));\n  }\n\n  // Hero image operations\n  async getHeroImages(): Promise<HeroImage[]> {\n    return await db.select().from(heroImages).orderBy(heroImages.displayOrder);\n  }\n\n  async getHeroImage(id: string): Promise<HeroImage | undefined> {\n    const [heroImage] = await db.select().from(heroImages).where(eq(heroImages.id, id));\n    return heroImage || undefined;\n  }\n\n  async createHeroImage(insertHeroImage: InsertHeroImage): Promise<HeroImage> {\n    const [heroImage] = await db.insert(heroImages).values(insertHeroImage).returning();\n    return heroImage;\n  }\n\n  async updateHeroImage(id: string, updateData: Partial<InsertHeroImage>): Promise<HeroImage> {\n    const [heroImage] = await db\n      .update(heroImages)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(heroImages.id, id))\n      .returning();\n    return heroImage;\n  }\n\n  async deleteHeroImage(id: string): Promise<void> {\n    await db.delete(heroImages).where(eq(heroImages.id, id));\n  }\n\n  // Program operations\n  async getPrograms(): Promise<Program[]> {\n    return await db.select().from(programs);\n  }\n\n  async getProgram(id: string): Promise<Program | undefined> {\n    const [program] = await db.select().from(programs).where(eq(programs.id, id));\n    return program || undefined;\n  }\n\n  async createProgram(insertProgram: InsertProgram): Promise<Program> {\n    const [program] = await db.insert(programs).values(insertProgram).returning();\n    return program;\n  }\n\n  async updateProgram(id: string, updateData: Partial<InsertProgram>): Promise<Program> {\n    const [program] = await db\n      .update(programs)\n      .set(updateData)\n      .where(eq(programs.id, id))\n      .returning();\n    return program;\n  }\n\n  async deleteProgram(id: string): Promise<void> {\n    await db.delete(programs).where(eq(programs.id, id));\n  }\n\n  // News operations\n  async getNews(): Promise<News[]> {\n    return await db.select().from(news);\n  }\n\n  async getNewsItem(id: string): Promise<News | undefined> {\n    const [newsItem] = await db.select().from(news).where(eq(news.id, id));\n    return newsItem || undefined;\n  }\n\n  async createNews(insertNews: InsertNews): Promise<News> {\n    const [newsItem] = await db.insert(news).values(insertNews).returning();\n    return newsItem;\n  }\n\n  async updateNews(id: string, updateData: Partial<InsertNews>): Promise<News> {\n    const [newsItem] = await db\n      .update(news)\n      .set({ ...updateData, updatedAt: new Date() })\n      .where(eq(news.id, id))\n      .returning();\n    return newsItem;\n  }\n\n  async deleteNews(id: string): Promise<void> {\n    await db.delete(news).where(eq(news.id, id));\n  }\n\n  async getPublishedNews(): Promise<News[]> {\n    return await db.select().from(news).where(eq(news.isPublished, true)).orderBy(news.publishDate);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":32061},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Replit Auth\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Admin users table for role-based access\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  role: varchar(\"role\").notNull().default(\"admin\"), // admin, super_admin, editor\n  permissions: text(\"permissions\").array(), // array of permissions\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Member classes table for organizing members\nexport const memberClasses = pgTable(\"member_classes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(), // Website Manager, Officer, Active Member, Faculty Advisors\n  description: text(\"description\"),\n  displayOrder: integer(\"display_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Members table for society members\nexport const members = pgTable(\"members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  role: text(\"role\"), // President, Vice President, Secretary, etc. (nullable for Active Members)\n  memberClassId: varchar(\"member_class_id\").references(() => memberClasses.id),\n  bio: text(\"bio\"),\n  image: text(\"image\"), // Full resolution profile image URL\n  thumbnail: text(\"thumbnail\"), // Optimized thumbnail URL (256x256)\n  linkedIn: text(\"linkedin\"),\n  year: text(\"year\"), // Graduation year or grade\n  isActive: boolean(\"is_active\").default(true),\n  displayOrder: integer(\"display_order\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Hero images table for carousel management\nexport const heroImages = pgTable(\"hero_images\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  imageUrl: text(\"image_url\").notNull(),\n  altText: text(\"alt_text\").notNull(),\n  displayOrder: integer(\"display_order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const programs = pgTable(\"programs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  subtitle: text(\"subtitle\").notNull(),\n  description: text(\"description\").notNull(),\n  image: text(\"image\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const news = pgTable(\"news\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  category: text(\"category\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  content: text(\"content\"), // Full article content\n  image: text(\"image\").notNull(),\n  isPublished: boolean(\"is_published\").default(false),\n  publishDate: timestamp(\"publish_date\"),\n  authorId: varchar(\"author_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Replit Auth user schema\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\n// Admin user schemas\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Member class schemas\nexport const insertMemberClassSchema = createInsertSchema(memberClasses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Member schemas\nexport const insertMemberSchema = createInsertSchema(members).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Hero image schemas\nexport const insertHeroImageSchema = createInsertSchema(heroImages).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProgramSchema = createInsertSchema(programs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNewsSchema = createInsertSchema(news).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Type exports\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertMemberClass = z.infer<typeof insertMemberClassSchema>;\nexport type MemberClass = typeof memberClasses.$inferSelect;\nexport type InsertMember = z.infer<typeof insertMemberSchema>;\nexport type Member = typeof members.$inferSelect;\nexport type InsertHeroImage = z.infer<typeof insertHeroImageSchema>;\nexport type HeroImage = typeof heroImages.$inferSelect;\nexport type InsertProgram = z.infer<typeof insertProgramSchema>;\nexport type Program = typeof programs.$inferSelect;\nexport type InsertNews = z.infer<typeof insertNewsSchema>;\nexport type News = typeof news.$inferSelect;\n","size_bytes":6002},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport News from \"@/pages/news\";\nimport Contact from \"@/pages/contact\";\nimport Terms from \"@/pages/terms\";\nimport Privacy from \"@/pages/privacy\";\nimport AdminPage from \"@/pages/admin\";\nimport LoginPage from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\n\n// Component to handle scroll to top on route change\nfunction ScrollToTop() {\n  const [location] = useLocation();\n  \n  useEffect(() => {\n    // Smooth scroll to top whenever the location changes\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, [location]);\n  \n  return null;\n}\n\nfunction Router() {\n  return (\n    <>\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/news\" component={News} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route path=\"/terms\" component={Terms} />\n        <Route path=\"/privacy\" component={Privacy} />\n        <Route path=\"/login\" component={LoginPage} />\n        <Route path=\"/admin\" component={AdminPage} />\n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1702},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;500;600;700&display=swap');\n\n/* Beo Font Family */\n@font-face {\n  font-family: 'Beo';\n  src: url('/fonts/beo_regular.otf') format('opentype');\n  font-weight: 400;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Beo';\n  src: url('/fonts/beo_italic.otf') format('opentype');\n  font-weight: 400;\n  font-style: italic;\n}\n\n@font-face {\n  font-family: 'Beo';\n  src: url('/fonts/beo-bold.otf') format('opentype');\n  font-weight: 700;\n  font-style: normal;\n}\n\n@font-face {\n  font-family: 'Beo';\n  src: url('/fonts/beo-boldItalic.otf') format('opentype');\n  font-weight: 700;\n  font-style: italic;\n}\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Premium Monochrome Palette */\n  --ink: hsl(210, 12%, 4%);\n  --graphite: hsl(210, 8%, 15%);\n  --slate: hsl(210, 6%, 25%);\n  --mist: hsl(210, 4%, 85%);\n  --paper: hsl(0, 0%, 100%);\n  \n  /* Premium Accent */\n  --primary-blue: hsl(221, 83%, 53%);\n  --secondary-teal: hsl(180, 65%, 45%);\n  \n  /* Luxury Shadows - Enhanced for better separation */\n  --shadow-hairline: 0 1px 3px 0 rgb(0 0 0 / 0.08);\n  --shadow-subtle: 0 3px 12px 0 rgb(0 0 0 / 0.1);\n  --shadow-medium: 0 6px 20px 0 rgb(0 0 0 / 0.15);\n  --shadow-elevated: 0 10px 30px 0 rgb(0 0 0 / 0.2);\n  \n  /* Premium Motion */\n  --ease-luxury: cubic-bezier(0.2, 0.8, 0.2, 1);\n  --duration-fast: 200ms;\n  --duration-medium: 300ms;\n\n  /* Design System Tokens - Enhanced contrast */\n  --background: var(--paper);\n  --background-subtle: hsl(210, 20%, 98%);\n  --background-muted: hsl(210, 15%, 96%);\n  --foreground: var(--ink);\n  --card: var(--paper);\n  --card-subtle: hsl(210, 25%, 97%);\n  --card-foreground: var(--ink);\n  --popover: var(--paper);\n  --popover-foreground: var(--ink);\n  --primary: var(--primary-blue);\n  --primary-foreground: var(--paper);\n  --secondary: var(--mist);\n  --secondary-foreground: var(--ink);\n  --muted: var(--mist);\n  --muted-foreground: var(--slate);\n  --accent: var(--secondary-teal);\n  --accent-foreground: var(--paper);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: var(--paper);\n  --border: hsl(210, 8%, 88%);\n  --border-subtle: hsl(210, 4%, 94%);\n  --input: hsl(210, 8%, 90%);\n  --ring: var(--primary-blue);\n  --chart-1: var(--primary-blue);\n  --chart-2: var(--secondary-teal);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: var(--paper);\n  --sidebar-foreground: var(--ink);\n  --sidebar-primary: var(--primary-blue);\n  --sidebar-primary-foreground: var(--paper);\n  --sidebar-accent: var(--mist);\n  --sidebar-accent-foreground: var(--ink);\n  --sidebar-border: hsl(210, 4%, 92%);\n  --sidebar-ring: var(--primary-blue);\n  --font-sans: Montserrat;\n  --font-serif: Architects Daughter;\n  --font-mono: Architects Daughter;\n  --font-display: 'Beo';\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Dark Mode: Sophisticated Graphite */\n  --background: var(--ink);\n  --background-subtle: hsl(210, 12%, 6%);\n  --background-muted: hsl(210, 10%, 8%);\n  --foreground: var(--paper);\n  --card: var(--graphite);\n  --card-subtle: hsl(210, 8%, 18%);\n  --card-foreground: var(--paper);\n  --popover: var(--graphite);\n  --popover-foreground: var(--paper);\n  --primary: var(--primary-blue);\n  --primary-foreground: var(--paper);\n  --secondary: var(--slate);\n  --secondary-foreground: var(--paper);\n  --muted: var(--slate);\n  --muted-foreground: var(--mist);\n  --accent: var(--secondary-teal);\n  --accent-foreground: var(--paper);\n  --destructive: hsl(0, 63%, 31%);\n  --destructive-foreground: var(--paper);\n  --border: hsl(210, 6%, 30%);\n  --border-subtle: hsl(210, 6%, 20%);\n  --input: var(--slate);\n  --ring: var(--primary-blue);\n  --sidebar: var(--graphite);\n  --sidebar-foreground: var(--paper);\n  --sidebar-primary: var(--primary-blue);\n  --sidebar-primary-foreground: var(--paper);\n  --sidebar-accent: var(--slate);\n  --sidebar-accent-foreground: var(--paper);\n  --sidebar-border: var(--slate);\n  --sidebar-ring: var(--primary-blue);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  /* Premium Typography System */\n  .font-display {\n    font-weight: 700 !important;\n    letter-spacing: 0.01em;\n    line-height: 1.2;\n    -webkit-text-stroke: 0.15px currentColor;\n  }\n\n  /* Large headings - refined and elegant */\n  h1.font-display, h2.font-display {\n    letter-spacing: 0.02em;\n    font-weight: 700 !important;\n    -webkit-text-stroke: 0.2px currentColor;\n    line-height: 1.1;\n  }\n\n  /* Logo - sophisticated branding */\n  .font-display.text-xl {\n    letter-spacing: 0.05em;\n    -webkit-text-stroke: 0.15px currentColor;\n  }\n\n  /* Premium Motion System */\n  .luxury-hover {\n    transition: all var(--duration-fast) var(--ease-luxury);\n  }\n\n  .luxury-hover:hover {\n    transform: translateY(-1px);\n    box-shadow: var(--shadow-medium);\n  }\n\n  .luxury-press:active {\n    transform: scale(0.98);\n    transition: transform 100ms ease-out;\n  }\n\n  /* Custom Animations */\n  @keyframes luxury-fade-in {\n    from {\n      opacity: 0;\n      transform: translateY(8px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  @keyframes luxury-scale-in {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  .luxury-fade-in {\n    animation: luxury-fade-in var(--duration-medium) var(--ease-luxury) both;\n  }\n\n  .luxury-scale-in {\n    animation: luxury-scale-in var(--duration-medium) var(--ease-luxury) both;\n  }\n\n\n  /* Premium Texture Effects */\n  .texture-subtle {\n    background-image: \n      radial-gradient(circle at 1px 1px, rgba(255,255,255,0.15) 1px, transparent 0);\n    background-size: 20px 20px;\n  }\n  \n  .texture-noise {\n    background-image: \n      url(\"data:image/svg+xml,%3Csvg viewBox='0 0 256 256' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.65' numOctaves='4' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.02'/%3E%3C/svg%3E\");\n  }\n\n  /* Enhanced Surface Hierarchy */\n  .surface-elevated {\n    background: hsl(from var(--background) h s calc(l + 1%));\n    border: 1px solid var(--border-subtle);\n  }\n  \n  .surface-sunken {\n    background: hsl(from var(--background) h s calc(l - 1%));\n    border: 1px solid var(--border);\n  }\n\n  /* Respect reduced motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    .luxury-hover,\n    .luxury-press,\n    .luxury-fade-in,\n    .luxury-scale-in {\n      animation: none;\n      transition: none;\n    }\n  }\n}\n\n/* Print-friendly styles for medical information */\n@media print {\n  /* Hide navigation and non-essential elements when printing */\n  header, footer, nav, .no-print {\n    display: none !important;\n  }\n\n  /* Optimize page layout for print */\n  * {\n    background: white !important;\n    color: black !important;\n    box-shadow: none !important;\n    text-shadow: none !important;\n  }\n\n  /* Ensure content fits well on printed pages */\n  body {\n    font-size: 12pt !important;\n    line-height: 1.4 !important;\n    margin: 0.5in !important;\n  }\n\n  /* Make headings stand out in print */\n  h1, h2, h3, h4, h5, h6 {\n    page-break-after: avoid;\n    font-weight: bold !important;\n    margin-top: 1em !important;\n    margin-bottom: 0.5em !important;\n  }\n\n  /* Ensure proper spacing for medical content */\n  p, li {\n    orphans: 3;\n    widows: 3;\n  }\n\n  /* Handle images appropriately */\n  img {\n    max-width: 100% !important;\n    height: auto !important;\n    page-break-inside: avoid;\n  }\n\n  /* Style links to show URLs */\n  a::after {\n    content: \" (\" attr(href) \")\";\n    font-size: 10pt;\n    color: #666;\n  }\n\n  /* Remove hover effects and animations for print */\n  * {\n    transition: none !important;\n    animation: none !important;\n  }\n\n  /* Ensure good contrast for text */\n  .text-primary, .text-blue-600, .text-teal-600, .text-green-600 {\n    color: #000 !important;\n  }\n\n  /* Page breaks for better content flow */\n  .page-break {\n    page-break-before: always;\n  }\n\n  /* Style cards and containers for print */\n  .card, .bg-white, .bg-gray-50, .bg-blue-50, .bg-green-50, .bg-teal-50 {\n    background: white !important;\n    border: 1px solid #ccc !important;\n    border-radius: 0 !important;\n    margin-bottom: 1em !important;\n    padding: 1em !important;\n  }\n}\n\n/* Custom gradient utilities */\n.bg-gradient-radial {\n  background: radial-gradient(circle, var(--tw-gradient-stops));\n}\n","size_bytes":9364},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/footer.tsx":{"content":"import { Mail, Facebook, Instagram, Twitter } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport logoImage from \"@assets/logo_1756537062633.jpg\";\n\nexport default function Footer() {\n  const handleNavClick = () => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  return (\n    <footer className=\"bg-gradient-to-br from-slate-900 via-[var(--graphite)] to-slate-800 text-slate-300 py-16 texture-noise border-t border-slate-700/50\" data-testid=\"footer\" style={{ boxShadow: 'inset 0 1px 0 0 rgb(148 163 184 / 0.1)' }}>\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          {/* Quick Links */}\n          <div data-testid=\"footer-quicklinks\">\n            <h3 className=\"text-white font-bold text-lg mb-4 font-display\">QUICK LINKS</h3>\n            <ul className=\"space-y-3\">\n              <li><Link href=\"/\" className=\"hover:text-white transition-colors\" data-testid=\"footer-link-home\" onClick={handleNavClick}>Home</Link></li>\n              <li><Link href=\"/about\" className=\"hover:text-white transition-colors\" data-testid=\"footer-link-about\" onClick={handleNavClick}>About us</Link></li>\n              <li><Link href=\"/news\" className=\"hover:text-white transition-colors\" data-testid=\"footer-link-news\" onClick={handleNavClick}>News</Link></li>\n              <li><Link href=\"/contact\" className=\"hover:text-white transition-colors\" data-testid=\"footer-link-contact\" onClick={handleNavClick}>Contact</Link></li>\n            </ul>\n          </div>\n\n          {/* Contact */}\n          <div data-testid=\"footer-contact\">\n            <h3 className=\"text-white font-bold text-lg mb-4 font-display\">CONTACT</h3>\n            <a \n              href=\"mailto:info@isbmedicalsociety.org\" \n              className=\"mb-2 flex items-center hover:text-white transition-colors duration-200\" \n              data-testid=\"footer-email\"\n            >\n              <Mail className=\"w-4 h-4 mr-2\" /> \n              info@isbmedicalsociety.org\n            </a>\n            <a \n              href=\"https://instagram.com/isbmedsociety\" \n              target=\"_blank\" \n              rel=\"noopener noreferrer\" \n              className=\"mb-4 flex items-center hover:text-white transition-colors duration-200\" \n              data-testid=\"footer-instagram\"\n            >\n              <Instagram className=\"w-4 h-4 mr-2\" /> \n              @isbmedsociety\n            </a>\n            \n          </div>\n\n          {/* Organization */}\n          <div data-testid=\"footer-organization\">\n            <h3 className=\"text-white font-bold text-lg mb-4 font-display\">ORGANIZATION</h3>\n            <p className=\"text-sm leading-relaxed\">ISB is a student-led organization striving to educate the community about health, advocate for healthcare equity, and raise funds for charity.</p>\n          </div>\n\n          {/* Medical Society for Students (Logo) */}\n          <div data-testid=\"footer-logo\">\n            <h3 className=\"text-white font-bold text-lg mb-4 font-display\">ISB MEDICAL SOCIETY</h3>\n            <img \n              src={logoImage}\n              alt=\"ISB MedSociety Logo\" \n              className=\"w-20 h-20 rounded-full object-cover\"\n              data-testid=\"footer-logo-image\"\n            />\n          </div>\n        </div>\n\n        <div className=\"border-t border-slate-700/70 mt-12 pt-8\">\n          <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n            <p className=\"text-sm\" data-testid=\"footer-copyright\">© 2025 ISB Medical Society. All rights reserved.</p>\n            <div className=\"flex items-center gap-6 text-sm\">\n              <Link href=\"/terms\" className=\"hover:text-white transition-colors\" data-testid=\"footer-link-terms\" onClick={handleNavClick}>\n                Terms of Service\n              </Link>\n              <Link href=\"/privacy\" className=\"hover:text-white transition-colors\" data-testid=\"footer-link-privacy\" onClick={handleNavClick}>\n                Privacy Policy\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":4102},"client/src/components/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\nimport { Loading } from \"@/components/ui/loading\";\nimport logoImage from \"@assets/logo_1756537062633.jpg\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [isScrolledPastHero, setIsScrolledPastHero] = useState(false);\n  const [loadingNav, setLoadingNav] = useState(false);\n  \n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const toggleMobileMenu = () => {\n    setMobileMenuOpen(!mobileMenuOpen);\n  };\n\n  const closeMobileMenu = () => {\n    setMobileMenuOpen(false);\n  };\n\n  const handleMobileNavClick = () => {\n    closeMobileMenu();\n    // Scroll to top when navigating on mobile\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleNavClick = () => {\n    setLoadingNav(true);\n    setTimeout(() => {\n      // Scroll to top when navigating on desktop\n      window.scrollTo({ top: 0, behavior: 'smooth' });\n      setLoadingNav(false);\n    }, 300);\n  };\n\n  // Scroll detection for home page header transparency\n  useEffect(() => {\n    if (location !== \"/\") {\n      setIsScrolledPastHero(true); // Always solid on non-home pages\n      return;\n    }\n\n    const handleScroll = () => {\n      const scrollY = window.scrollY;\n      const heroHeight = window.innerHeight; // Hero is h-screen (full viewport height)\n      \n      // Header becomes transparent when scrolled into hero (past 50px) and solid again when past hero\n      const inHeroArea = scrollY > 50 && scrollY < heroHeight * 0.9;\n      setIsScrolledPastHero(!inHeroArea); // Inverted logic: false = transparent, true = solid\n    };\n\n    // Initial check\n    handleScroll();\n    \n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, [location]);\n\n  const isHomePage = location === \"/\";\n  const isTransparent = isHomePage && !isScrolledPastHero;\n\n  return (\n    <header \n      className={`sticky top-0 z-50 transition-all duration-300 ease-in-out border-b ${\n        isTransparent \n          ? 'bg-black/20 dark:bg-black/20 border-white/20 backdrop-blur-md' \n          : 'bg-background dark:bg-background border-border surface-elevated'\n      }`} \n      style={isTransparent ? {} : { boxShadow: 'var(--shadow-subtle)' }}\n    >\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-20\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-4 luxury-hover\" data-testid=\"logo\">\n              <img \n                src={logoImage}\n                alt=\"ISB Medical Society Logo\" \n                className=\"w-12 h-12 rounded-full object-cover\"\n                data-testid=\"logo-image\"\n              />\n              <span className={`text-2xl font-display transition-colors duration-300 ${\n                isTransparent ? 'text-white' : 'text-primary'\n              }`}>ISB Medical Society</span>\n            </div>\n          </Link>\n          \n          {/* Center Navigation */}\n          <nav className=\"hidden lg:flex items-center space-x-8\" data-testid=\"navigation\">\n            <Link \n              href=\"/\" \n              className={`relative font-display font-medium text-2xl transition-colors duration-300 ${\n                isActive(\"/\") \n                  ? (isTransparent ? \"text-white\" : \"text-primary\")\n                  : (isTransparent ? \"text-white/80 hover:text-white\" : \"text-muted-foreground hover:text-foreground\")\n              }`} \n              data-testid=\"nav-home\"\n              onClick={handleNavClick}\n            >\n              Home\n              {isActive(\"/\") && <div className={`absolute -bottom-1 left-0 right-0 h-0.5 rounded-full transition-colors duration-300 ${\n                isTransparent ? 'bg-white' : 'bg-primary'\n              }`} />}\n            </Link>\n            <Link \n              href=\"/about\" \n              className={`relative font-display font-medium text-2xl transition-colors duration-300 ${\n                isActive(\"/about\") \n                  ? (isTransparent ? \"text-white\" : \"text-primary\")\n                  : (isTransparent ? \"text-white/80 hover:text-white\" : \"text-muted-foreground hover:text-foreground\")\n              }`} \n              data-testid=\"nav-about\"\n              onClick={handleNavClick}\n            >\n              About\n              {isActive(\"/about\") && <div className={`absolute -bottom-1 left-0 right-0 h-0.5 rounded-full transition-colors duration-300 ${\n                isTransparent ? 'bg-white' : 'bg-primary'\n              }`} />}\n            </Link>\n            <Link \n              href=\"/news\" \n              className={`relative font-display font-medium text-2xl transition-colors duration-300 ${\n                isActive(\"/news\") \n                  ? (isTransparent ? \"text-white\" : \"text-primary\")\n                  : (isTransparent ? \"text-white/80 hover:text-white\" : \"text-muted-foreground hover:text-foreground\")\n              }`} \n              data-testid=\"nav-news\"\n              onClick={handleNavClick}\n            >\n              News\n              {isActive(\"/news\") && <div className={`absolute -bottom-1 left-0 right-0 h-0.5 rounded-full transition-colors duration-300 ${\n                isTransparent ? 'bg-white' : 'bg-primary'\n              }`} />}\n            </Link>\n            <Link \n              href=\"/contact\" \n              className={`relative font-display font-medium text-2xl transition-colors duration-300 ${\n                isActive(\"/contact\") \n                  ? (isTransparent ? \"text-white\" : \"text-primary\")\n                  : (isTransparent ? \"text-white/80 hover:text-white\" : \"text-muted-foreground hover:text-foreground\")\n              }`} \n              data-testid=\"nav-contact\"\n              onClick={handleNavClick}\n            >\n              Contact\n              {isActive(\"/contact\") && <div className={`absolute -bottom-1 left-0 right-0 h-0.5 rounded-full transition-colors duration-300 ${\n                isTransparent ? 'bg-white' : 'bg-primary'\n              }`} />}\n            </Link>\n          </nav>\n\n          {/* Right side - CTA and Mobile Menu */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Premium CTA */}\n            <Link href=\"/contact\" className=\"hidden md:block\" onClick={handleNavClick}>\n              <Button \n                className={`px-6 py-2 luxury-hover luxury-press font-medium text-[20px] transition-all duration-300 ${\n                  isTransparent \n                    ? 'bg-white/20 hover:bg-white/30 text-white border border-white/30 backdrop-blur-sm' \n                    : 'bg-primary hover:bg-primary/90 text-primary-foreground'\n                }`}\n                style={isTransparent ? {} : { boxShadow: 'var(--shadow-hairline)' }}\n                data-testid=\"header-cta\"\n                disabled={loadingNav}\n              >\n                {loadingNav ? (\n                  <Loading size=\"sm\" variant=\"spinner\" />\n                ) : (\n                  'Join Us'\n                )}\n              </Button>\n            </Link>\n\n            {/* Mobile menu button */}\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              className={`lg:hidden p-2 luxury-hover transition-colors duration-300 ${\n                isTransparent ? 'text-white/80 hover:text-white' : 'text-muted-foreground hover:text-foreground'\n              }`}\n              onClick={toggleMobileMenu}\n              data-testid=\"mobile-menu-button\"\n            >\n              {mobileMenuOpen ? <X className=\"w-5 h-5\" /> : <Menu className=\"w-5 h-5\" />}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation Menu */}\n        <div className={`lg:hidden transition-all duration-300 ease-in-out ${mobileMenuOpen ? 'max-h-80 opacity-100' : 'max-h-0 opacity-0 overflow-hidden'}`}>\n          <nav className=\"px-4 py-6 border-t border-border bg-background dark:bg-background\" data-testid=\"mobile-navigation\">\n            <div className=\"space-y-3\">\n              <Link \n                href=\"/\" \n                className={`block font-display font-medium text-2xl py-3 px-4 rounded-xl luxury-hover ${isActive(\"/\") ? \"text-primary bg-primary/10\" : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"}`}\n                onClick={handleMobileNavClick}\n                data-testid=\"mobile-nav-home\"\n              >\n                Home\n              </Link>\n              <Link \n                href=\"/about\" \n                className={`block font-display font-medium text-2xl py-3 px-4 rounded-xl luxury-hover ${isActive(\"/about\") ? \"text-primary bg-primary/10\" : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"}`}\n                onClick={handleMobileNavClick}\n                data-testid=\"mobile-nav-about\"\n              >\n                About\n              </Link>\n              <Link \n                href=\"/news\" \n                className={`block font-display font-medium text-2xl py-3 px-4 rounded-xl luxury-hover ${isActive(\"/news\") ? \"text-primary bg-primary/10\" : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"}`}\n                onClick={handleMobileNavClick}\n                data-testid=\"mobile-nav-news\"\n              >\n                News\n              </Link>\n              <Link \n                href=\"/contact\" \n                className={`block font-display font-medium text-2xl py-3 px-4 rounded-xl luxury-hover ${isActive(\"/contact\") ? \"text-primary bg-primary/10\" : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"}`}\n                onClick={handleMobileNavClick}\n                data-testid=\"mobile-nav-contact\"\n              >\n                Contact\n              </Link>\n              \n              {/* Mobile CTA */}\n              <div className=\"pt-4 border-t border-border\">\n                <Link href=\"/contact\" onClick={handleMobileNavClick}>\n                  <Button \n                    className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground luxury-hover luxury-press text-2xl\"\n                    data-testid=\"mobile-header-cta\"\n                  >\n                    Join Us\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":10665},"client/src/components/hero.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link, useLocation } from \"wouter\";\nimport { Loading } from \"@/components/ui/loading\";\nimport groupPhotoImage from \"@assets/97ccae24-4d7b-48c9-a16e-40476198cbd1_1758466251232.png\";\nimport hospitalVisitImage from \"@assets/e5a0817e-1bad-4a67-bc34-45225337e332_1758466243134.png\";\nimport educationImage from \"@assets/16fd4d4d-d0b8-481f-821d-9d4b8ccae2f6_1758466251232.png\";\n\nconst heroImages = [\n  {\n    src: groupPhotoImage,\n    alt: \"ISB Medical Society - First Aid Training Certification Group\"\n  },\n  {\n    src: hospitalVisitImage,\n    alt: \"ISB Medical Society - Hospital Community Outreach\"\n  },\n  {\n    src: educationImage,\n    alt: \"ISB Medical Society - Health Education Programs\"\n  }\n];\n\nexport default function Hero() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [scrollOpacity, setScrollOpacity] = useState(1);\n  const [location, navigate] = useLocation();\n  const [loadingButton, setLoadingButton] = useState<string | null>(null);\n  const [isTransitioning, setIsTransitioning] = useState(false);\n\n  // Auto-advance carousel with transition effects\n  useEffect(() => {\n    if (!isPlaying) return;\n    \n    const interval = setInterval(() => {\n      setIsTransitioning(true);\n      setTimeout(() => {\n        setCurrentSlide((prev) => (prev + 1) % heroImages.length);\n        setTimeout(() => {\n          setIsTransitioning(false);\n        }, 800); // Allow transition to complete\n      }, 100);\n    }, 6000); // 6 seconds per slide\n    \n    return () => clearInterval(interval);\n  }, [isPlaying]);\n\n  // Scroll fade effect\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollY = window.scrollY;\n      const fadeStart = 0; // Start fading immediately\n      const fadeEnd = 150; // Completely faded after 150px of scroll\n      \n      if (scrollY <= fadeStart) {\n        setScrollOpacity(1);\n      } else if (scrollY >= fadeEnd) {\n        setScrollOpacity(0);\n      } else {\n        // Calculate opacity between fadeStart and fadeEnd\n        const fadeProgress = scrollY / fadeEnd;\n        setScrollOpacity(1 - fadeProgress);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Pause on user interaction\n  const handleInteraction = () => {\n    setIsPlaying(false);\n    setTimeout(() => setIsPlaying(true), 10000); // Resume after 10s\n  };\n\n  const goToSlide = (index: number) => {\n    setIsTransitioning(true);\n    setTimeout(() => {\n      setCurrentSlide(index);\n      setTimeout(() => {\n        setIsTransitioning(false);\n      }, 800);\n    }, 100);\n    handleInteraction();\n  };\n\n  // Scroll to next section\n  const scrollToNext = () => {\n    const heroSection = document.querySelector('[data-testid=\"hero-section\"]');\n    if (heroSection) {\n      const nextSection = heroSection.nextElementSibling;\n      if (nextSection) {\n        nextSection.scrollIntoView({ \n          behavior: 'smooth',\n          block: 'start'\n        });\n      }\n    }\n  };\n\n  // Handle Join Our Mission button click\n  const handleJoinClick = () => {\n    setLoadingButton('join');\n    setTimeout(() => {\n      if (location === '/contact') {\n        // If already on contact page, scroll to top\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      } else {\n        // If not on contact page, navigate to contact page\n        navigate('/contact');\n      }\n      setLoadingButton(null);\n      handleInteraction();\n    }, 500);\n  };\n\n  // Handle Learn More button click\n  const handleLearnMoreClick = () => {\n    setLoadingButton('learn');\n    setTimeout(() => {\n      if (location === '/about') {\n        // If already on about page, scroll to top\n        window.scrollTo({ top: 0, behavior: 'smooth' });\n      } else {\n        // If not on about page, navigate to about page\n        navigate('/about');\n      }\n      setLoadingButton(null);\n      handleInteraction();\n    }, 500);\n  };\n\n  return (\n    <section \n      className=\"relative h-screen overflow-hidden bg-black\"\n      data-testid=\"hero-section\"\n      onMouseEnter={() => setIsPlaying(false)}\n      onMouseLeave={() => setIsPlaying(true)}\n    >\n      {/* Enhanced Background Carousel with Fade + Swipe + Heat Effects */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {heroImages.map((image, index) => {\n          const isActive = index === currentSlide;\n          const isPrev = index === (currentSlide - 1 + heroImages.length) % heroImages.length;\n          const isNext = index === (currentSlide + 1) % heroImages.length;\n          \n          return (\n            <div\n              key={index}\n              className={`absolute inset-0 transition-all duration-1000 ease-out ${\n                isActive \n                  ? 'opacity-100 transform translate-x-0 scale-100' \n                  : isPrev \n                    ? 'opacity-0 transform -translate-x-full scale-105'\n                    : isNext\n                      ? 'opacity-0 transform translate-x-full scale-105'\n                      : 'opacity-0 transform translate-x-0 scale-110'\n              }`}\n              style={{\n                filter: isTransitioning && isActive \n                  ? 'blur(2px) saturate(1.3) contrast(1.1) brightness(1.1)' \n                  : 'blur(0px) saturate(1) contrast(1) brightness(1)',\n                transition: 'all 800ms cubic-bezier(0.25, 0.46, 0.45, 0.94)'\n              }}\n            >\n              <img \n                src={image.src}\n                alt={image.alt}\n                className=\"w-full h-full object-cover\"\n                style={{\n                  transform: isTransitioning && isActive ? 'scale(1.02)' : 'scale(1)',\n                  transition: 'transform 800ms ease-out'\n                }}\n                onLoad={() => console.log('Image loaded and visible:', image.src, 'slide:', index, 'current:', currentSlide)}\n              />\n              {/* Heat effect overlay during transitions */}\n              {isTransitioning && isActive && (\n                <div \n                  className=\"absolute inset-0 transition-opacity duration-300\"\n                  style={{\n                    background: 'radial-gradient(circle at center, rgba(255, 69, 0, 0.15) 0%, rgba(255, 140, 0, 0.08) 40%, transparent 70%)',\n                    mixBlendMode: 'soft-light'\n                  }}\n                />\n              )}\n              {/* Dim the background image only - fades away on scroll */}\n              <div \n                className=\"absolute inset-0 bg-black/70 transition-opacity duration-300 ease-out\"\n                style={{ opacity: scrollOpacity }}\n              />\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Split layout with dedicated text area */}\n      <div className=\"absolute inset-0 grid lg:grid-cols-2 items-center\">\n        \n        {/* Left side - Text content */}\n        <div \n          className=\"h-full flex items-center justify-center p-8 sm:p-12 lg:p-16 transition-opacity duration-300 ease-out\"\n          style={{ \n            opacity: scrollOpacity\n          }}\n        >\n          <div className=\"max-w-2xl space-y-12 luxury-fade-in\">\n            \n            {/* Clean, readable typography */}\n            <div className=\"space-y-8\">\n              <h1 \n                className=\"text-5xl sm:text-6xl lg:text-7xl xl:text-8xl text-white leading-[1.1] tracking-wide\"\n                style={{ \n                  fontFamily: 'Beo, serif',\n                  letterSpacing: '0.02em',\n                  textShadow: '1px 1px 2px rgba(0, 0, 0, 0.5)',\n                  fontWeight: '700'\n                }}\n                data-testid=\"hero-title\"\n              >\n                <span className=\"block font-bold\">Advancing</span>\n                <span className=\"block text-primary font-bold mt-4\">Healthcare</span>\n                <span className=\"block text-white/80 text-2xl sm:text-3xl lg:text-4xl xl:text-5xl font-bold mt-6 tracking-[0.05em]\">\n                  Education & Equity\n                </span>\n              </h1>\n              \n              <p \n                className=\"text-base sm:text-lg lg:text-xl text-white/90 leading-loose font-light\"\n                style={{ \n                  letterSpacing: '0.025em',\n                  textShadow: '1px 1px 2px rgba(0, 0, 0, 0.4)',\n                  lineHeight: '1.8'\n                }}\n                data-testid=\"hero-description\"\n              >\n                A student-led organization dedicated to educating our community about health, \n                advocating for healthcare equity, and supporting medical initiatives worldwide.\n              </p>\n            </div>\n\n            {/* Premium CTAs - Enhanced to stand out */}\n            <div \n              className=\"flex flex-col sm:flex-row gap-6 pt-8\"\n              style={{ \n                opacity: Math.max(0.85, scrollOpacity) // Always stay highly visible\n              }}\n            >\n              <Button \n                size=\"lg\" \n                className=\"border border-blue-400/60 hover:border-blue-300/80 bg-blue-500/25 hover:bg-blue-500/35 text-white hover:text-white backdrop-blur-md px-12 py-6 text-lg font-medium luxury-hover luxury-press rounded-xl\"\n                style={{ \n                  boxShadow: '0 12px 40px rgba(59, 130, 246, 0.4), 0 4px 16px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(59, 130, 246, 0.5)',\n                  minWidth: '200px',\n                  background: 'linear-gradient(135deg, rgba(59, 130, 246, 0.3) 0%, rgba(37, 99, 235, 0.4) 100%)',\n                  textShadow: '0 2px 4px rgba(0, 0, 0, 0.5)'\n                }}\n                data-testid=\"hero-cta-primary\"\n                onClick={handleJoinClick}\n                disabled={loadingButton === 'join'}\n              >\n                {loadingButton === 'join' ? (\n                  <Loading size=\"sm\" variant=\"dots\" />\n                ) : (\n                  'Join Our Mission'\n                )}\n              </Button>\n              \n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border border-white/50 hover:border-white/70 bg-white/20 hover:bg-white/30 text-white hover:text-white backdrop-blur-md px-12 py-6 text-lg font-medium luxury-hover luxury-press rounded-xl\"\n                style={{ \n                  boxShadow: '0 12px 40px rgba(255, 255, 255, 0.2), 0 4px 16px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.4)',\n                  minWidth: '200px',\n                  background: 'linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.3) 100%)',\n                  textShadow: '0 2px 4px rgba(0, 0, 0, 0.5)'\n                }}\n                data-testid=\"hero-cta-secondary\"\n                onClick={handleLearnMoreClick}\n                disabled={loadingButton === 'learn'}\n              >\n                {loadingButton === 'learn' ? (\n                  <Loading size=\"sm\" variant=\"dots\" />\n                ) : (\n                  'Learn More'\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        {/* Right side - Full image display on larger screens, hidden on mobile */}\n        <div className=\"hidden lg:block h-full relative overflow-hidden\">\n          {/* Image shows through naturally here */}\n        </div>\n      </div>\n      \n\n      {/* Elegant Carousel Indicators */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 z-20\">\n        <div className=\"flex items-center space-x-3 p-4 rounded-full bg-black/20 backdrop-blur-md border border-white/10\">\n          {heroImages.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => goToSlide(index)}\n              className={`w-2 h-2 rounded-full transition-all duration-500 luxury-hover ${\n                index === currentSlide \n                  ? 'bg-primary w-8 shadow-lg shadow-primary/50' \n                  : 'bg-white/40 hover:bg-white/60'\n              }`}\n              style={{\n                boxShadow: index === currentSlide ? '0 0 20px rgba(59, 130, 246, 0.5)' : 'none'\n              }}\n              data-testid={`hero-indicator-${index}`}\n              aria-label={`Go to slide ${index + 1}`}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Scroll Indicator */}\n      <div className=\"absolute bottom-8 right-8 z-20\">\n        <button \n          onClick={scrollToNext}\n          className=\"flex flex-col items-center space-y-2 text-white/60 hover:text-white transition-colors duration-300 luxury-hover group\"\n          data-testid=\"scroll-indicator\"\n          aria-label=\"Scroll to next section\"\n        >\n          <span className=\"text-sm font-light tracking-wide\">SCROLL</span>\n          <div className=\"w-px h-8 bg-gradient-to-b from-white/60 to-transparent group-hover:from-white group-hover:to-white/20 transition-all duration-300\"></div>\n          <div className=\"w-2 h-2 border border-white/60 border-t-0 border-l-0 transform rotate-45 group-hover:border-white transition-colors duration-300 animate-bounce\"></div>\n        </button>\n      </div>\n\n    </section>\n  );\n}","size_bytes":13284},"client/src/components/mission.tsx":{"content":"import { GraduationCap, Scale, Globe } from \"lucide-react\";\n\nexport default function Mission() {\n  return (\n    <section className=\"py-24 bg-gradient-to-br from-slate-50/50 via-blue-50/30 to-slate-50/50 dark:from-slate-800/30 dark:via-slate-700/20 dark:to-slate-800/30 texture-noise relative\" data-testid=\"mission-section\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-20 luxury-fade-in\">\n          <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-display text-foreground mb-6\" data-testid=\"mission-title\">\n            Our <span className=\"text-primary\">Mission</span>\n          </h2>\n          <p className=\"text-lg sm:text-xl text-muted-foreground leading-relaxed max-w-3xl mx-auto\" data-testid=\"mission-description\">\n            \"Educating the public on diseases and advocating for healthcare equity everywhere.\"\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8 lg:gap-12\">\n          {/* Healthcare Education */}\n          <div className=\"group bg-card dark:bg-card border border-border rounded-2xl p-8 text-center luxury-hover luxury-press surface-elevated\" \n               style={{ boxShadow: 'var(--shadow-subtle)' }}\n               data-testid=\"card-education\">\n            <div className=\"w-20 h-20 bg-primary/10 dark:bg-primary/20 rounded-2xl flex items-center justify-center mx-auto mb-8 group-hover:bg-primary/15 transition-colors duration-300\">\n              <GraduationCap className=\"text-primary w-10 h-10\" />\n            </div>\n            <h3 className=\"text-xl font-display text-foreground mb-6\" data-testid=\"title-education\">\n              Healthcare Education\n            </h3>\n            <p className=\"text-muted-foreground leading-relaxed text-sm max-w-64 mx-auto\" data-testid=\"text-education\">\n              Providing comprehensive medical education and raising awareness about diseases and health conditions in our community.\n            </p>\n          </div>\n\n          {/* Healthcare Equity */}\n          <div className=\"group bg-card dark:bg-card border border-border rounded-2xl p-8 text-center luxury-hover luxury-press surface-elevated\" \n               style={{ boxShadow: 'var(--shadow-subtle)' }}\n               data-testid=\"card-equity\">\n            <div className=\"w-20 h-20 bg-accent/10 dark:bg-accent/20 rounded-2xl flex items-center justify-center mx-auto mb-8 group-hover:bg-accent/15 transition-colors duration-300\">\n              <Scale className=\"text-accent w-10 h-10\" />\n            </div>\n            <h3 className=\"text-xl font-display text-foreground mb-6\" data-testid=\"title-equity\">\n              Healthcare Equity\n            </h3>\n            <p className=\"text-muted-foreground leading-relaxed text-sm max-w-64 mx-auto\" data-testid=\"text-equity\">\n              Advocating for equal access to healthcare services and breaking down barriers to medical treatment for all.\n            </p>\n          </div>\n\n          {/* Global Impact */}\n          <div className=\"group bg-card dark:bg-card border border-border rounded-2xl p-8 text-center luxury-hover luxury-press surface-elevated\" \n               style={{ boxShadow: 'var(--shadow-subtle)' }}\n               data-testid=\"card-impact\">\n            <div className=\"w-20 h-20 bg-primary/10 dark:bg-primary/20 rounded-2xl flex items-center justify-center mx-auto mb-8 group-hover:bg-primary/15 transition-colors duration-300\">\n              <Globe className=\"text-primary w-10 h-10\" />\n            </div>\n            <h3 className=\"text-xl font-display text-foreground mb-6\" data-testid=\"title-impact\">\n              Global Impact\n            </h3>\n            <p className=\"text-muted-foreground leading-relaxed text-sm max-w-64 mx-auto\" data-testid=\"text-impact\">\n              Working towards a world where quality healthcare is accessible to everyone, regardless of location or background.\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3969},"client/src/components/news.tsx":{"content":"\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar } from \"lucide-react\";\n\nexport default function News() {\n  const newsItems: any[] = [];\n\n  return (\n    <section className=\"py-24 bg-gradient-to-br from-muted/30 via-background to-blue-50/20 dark:from-slate-900/40 dark:via-background dark:to-slate-800/20 relative texture-subtle\" data-testid=\"news-section\">\n      {/* Subtle Decorative Elements */}\n      <div className=\"absolute inset-0 -z-10 opacity-30\">\n        <div className=\"absolute top-32 right-20 w-48 h-48 bg-primary/8 rounded-full blur-2xl\" />\n        <div className=\"absolute bottom-32 left-20 w-64 h-64 bg-accent/6 rounded-full blur-2xl\" />\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-20 luxury-fade-in\">\n          <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-display text-foreground mb-6\" data-testid=\"news-title\">\n            Latest <span className=\"text-primary\">News</span>\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"news-description\">\n            Stay updated with our latest activities and medical initiatives\n          </p>\n        </div>\n\n        {newsItems.length === 0 ? (\n          <div className=\"text-center py-16\" data-testid=\"news-empty-state\">\n            <div className=\"max-w-md mx-auto\">\n              <div className=\"bg-white dark:bg-card rounded-2xl p-8 shadow-lg hover:shadow-xl hover:-translate-y-2 transition-all duration-300 ease-in-out\">\n                <div className=\"w-16 h-16 bg-gray-100 dark:bg-muted rounded-full flex items-center justify-center mx-auto mb-4 hover:scale-110 transition-transform duration-200 ease-in-out\">\n                  <Calendar className=\"w-8 h-8 text-gray-400 dark:text-muted-foreground\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-foreground mb-2 font-display\">No News Yet</h3>\n                <p className=\"text-muted-foreground\">\n                  We don't have any news articles at the moment. Check back soon for updates on our latest activities and events!\n                </p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {newsItems.map((news, index) => (\n              <div \n                key={news.id}\n                className=\"group bg-card dark:bg-card border border-border rounded-2xl overflow-hidden luxury-hover luxury-press flex flex-col h-full\"\n                style={{ \n                  boxShadow: 'var(--shadow-hairline)',\n                  animationDelay: `${index * 100}ms`\n                }}\n                data-testid={`card-news-${news.id}`}\n              >\n                <div className=\"aspect-video overflow-hidden\">\n                  <img \n                    src={news.image}\n                    alt={news.title}\n                    className=\"w-full h-full object-cover group-hover:scale-[1.02] transition-transform duration-500\"\n                    loading=\"lazy\"\n                    data-testid={`img-news-${news.id}`}\n                  />\n                </div>\n                <div className=\"p-6 flex flex-col flex-grow space-y-4\">\n                  <div className=\"space-y-3\">\n                    <span className=\"inline-block px-3 py-1 bg-primary/10 text-primary text-xs font-medium rounded-full\" data-testid={`category-news-${news.id}`}>\n                      {news.category}\n                    </span>\n                    <h3 className=\"text-lg font-display text-foreground leading-snug\" data-testid={`title-news-${news.id}`}>\n                      {news.title}\n                    </h3>\n                  </div>\n                  \n                  <p className=\"text-muted-foreground text-sm leading-relaxed flex-grow\" data-testid={`text-news-${news.id}`}>\n                    {news.description}\n                  </p>\n                  \n                  <div className=\"pt-2\">\n                    <Button \n                      variant=\"ghost\"\n                      className=\"w-full justify-start p-0 h-auto text-primary hover:text-primary/80 font-medium text-sm luxury-press\"\n                      data-testid={`button-read-${news.id}`}\n                    >\n                      Read more →\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4515},"client/src/components/programs.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\nimport { Loading } from \"@/components/ui/loading\";\nimport firstOnTheSceneImage from \"@assets/firstonthescene_1756537744391.png\";\nimport medicalMinuteImage from \"@assets/medicalminute_1756537744391.png\";\nimport fundraisingImage from \"@assets/fundraising_1756538236001.jpg\";\nimport donationImage from \"@assets/donation_1756537744391.jpg\";\n\nexport default function Programs() {\n  const [loadingProgram, setLoadingProgram] = useState<string | null>(null);\n  \n  const programs = [\n    {\n      id: \"first-on-the-scene\",\n      subtitle: \"First on the scene\",\n      description: \"Hands-on training in basic medical procedures and patient care techniques.\",\n      image: firstOnTheSceneImage\n    },\n    {\n      id: \"medical-minute\",\n      subtitle: \"Medical minute\",\n      description: \"Student-made short videos exploring current medical topics, with the aim to improve public health.\",\n      image: medicalMinuteImage\n    },\n    {\n      id: \"fundraising-events\",\n      subtitle: \"Fundraising events\",\n      description: \"Initiatives to raise funds for hospitals.\",\n      image: fundraisingImage\n    },\n    {\n      id: \"donation-charity\",\n      subtitle: \"Donation & charity\",\n      description: \"Donations to charitable organizations or hospitals.\",\n      image: donationImage\n    }\n  ];\n\n  return (\n    <section className=\"py-24 bg-gradient-to-br from-muted/20 via-background to-slate-50/30 dark:from-slate-900/30 dark:via-background dark:to-slate-800/20 relative overflow-hidden\" data-testid=\"activities-section\">\n      {/* Background Pattern */}\n      <div className=\"absolute inset-0 -z-10 opacity-20\">\n        <div className=\"absolute top-20 left-10 w-72 h-72 bg-primary/5 rounded-full blur-3xl\" />\n        <div className=\"absolute bottom-20 right-10 w-96 h-96 bg-accent/5 rounded-full blur-3xl\" />\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-20 luxury-fade-in\">\n          <h2 className=\"text-3xl sm:text-4xl lg:text-5xl font-display text-foreground mb-6\" data-testid=\"activities-title\">\n            Our <span className=\"text-primary\">Activities</span>\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Discover the initiatives driving our mission forward\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {programs.map((program, index) => (\n            <div \n              key={program.id}\n              className=\"group bg-card dark:bg-card border-2 border-border/50 hover:border-border rounded-2xl overflow-hidden luxury-hover luxury-press flex flex-col h-full surface-elevated\"\n              style={{ \n                boxShadow: 'var(--shadow-subtle)',\n                animationDelay: `${index * 100}ms`\n              }}\n              data-testid={`card-activity-${program.id}`}\n            >\n              <div className=\"overflow-hidden\">\n                <AspectRatio ratio={4 / 3}>\n                  <img \n                    src={program.image}\n                    alt={`${program.subtitle} - ISB Medical Society activity showcasing healthcare education and community engagement`}\n                    className=\"w-full h-full object-cover group-hover:scale-[1.02] transition-transform duration-500\"\n                    loading=\"lazy\"\n                    data-testid={`img-activity-${program.id}`}\n                  />\n                </AspectRatio>\n              </div>\n              \n              <div className=\"p-6 flex flex-col flex-grow space-y-4\">\n                <h3 className=\"text-xl font-display text-primary leading-snug\" data-testid={`subtitle-activity-${program.id}`}>\n                  {program.subtitle}\n                </h3>\n                \n                <p className=\"text-muted-foreground text-sm leading-relaxed flex-grow\" data-testid={`text-activity-${program.id}`}>\n                  {program.description}\n                </p>\n                \n                <div className=\"pt-2\">\n                  <Button \n                    className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground font-medium text-sm luxury-hover luxury-press\"\n                    style={{ boxShadow: 'var(--shadow-hairline)' }}\n                    data-testid={`button-learn-${program.id}`}\n                    onClick={() => {\n                      setLoadingProgram(program.id);\n                      setTimeout(() => {\n                        window.scrollTo({ top: 0, behavior: 'smooth' });\n                        window.location.href = '/about';\n                        setLoadingProgram(null);\n                      }, 500);\n                    }}\n                    disabled={loadingProgram === program.id}\n                  >\n                    {loadingProgram === program.id ? (\n                      <Loading size=\"sm\" variant=\"dots\" />\n                    ) : (\n                      'Learn more →'\n                    )}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5288},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nconst API_URL = import.meta.env.VITE_API_URL || '';\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(`${API_URL}${url}`, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(`${API_URL}${queryKey.join(\"/\")}`, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1456},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import Header from \"@/components/header\";\nimport Hero from \"@/components/hero\";\nimport Mission from \"@/components/mission\";\nimport Programs from \"@/components/programs\";\nimport News from \"@/components/news\";\nimport Footer from \"@/components/footer\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      <div className=\"animate-in fade-in-0 slide-in-from-bottom-4 duration-700 ease-out\">\n        <Hero />\n        \n        {/* Elegant Divider */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-24 h-px bg-gradient-to-r from-transparent via-border to-transparent\"></div>\n          </div>\n        </div>\n        \n        <Mission />\n        \n        {/* Subtle Section Transition */}\n        <div className=\"h-px bg-gradient-to-r from-transparent via-border/30 to-transparent mx-auto max-w-xs\"></div>\n        \n        <Programs />\n        \n        {/* Elegant Divider */}\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-24 h-px bg-gradient-to-r from-transparent via-border to-transparent\"></div>\n          </div>\n        </div>\n        \n        <News />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1353},"client/src/pages/not-found.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertTriangle, Home, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      <main className=\"py-16 flex items-center justify-center min-h-[70vh] animate-in fade-in-0 slide-in-from-bottom-4 duration-700 ease-out\">\n        <div className=\"max-w-lg mx-auto px-4 sm:px-6 lg:px-8 text-center\">\n          \n          {/* Error Icon and Code */}\n          <div className=\"mb-8\">\n            <div className=\"w-24 h-24 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6 hover:scale-110 transition-transform duration-200 ease-in-out\">\n              <AlertTriangle className=\"w-12 h-12 text-red-600\" />\n            </div>\n            <h1 className=\"text-6xl font-bold text-gray-900 mb-2\" data-testid=\"error-code\">404</h1>\n            <h2 className=\"text-2xl font-semibold text-gray-700 mb-4\" data-testid=\"error-title\">Page Not Found</h2>\n          </div>\n\n          {/* Error Message */}\n          <Card className=\"shadow-lg hover:shadow-xl transition-shadow duration-300 ease-in-out mb-8\">\n            <CardContent className=\"pt-6\">\n              <p className=\"text-gray-600 mb-4\" data-testid=\"error-message\">\n                Sorry, we couldn't find the page you're looking for. The page might have been moved, deleted, or you may have entered an incorrect URL.\n              </p>\n              <p className=\"text-sm text-gray-500\" data-testid=\"error-suggestion\">\n                Don't worry, you can easily get back to exploring ISB Medical Society's resources and activities.\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-4 sm:space-y-0 sm:space-x-4 sm:flex sm:justify-center\">\n            <Link href=\"/\" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n              <Button \n                className=\"w-full sm:w-auto bg-primary text-white hover:bg-primary/90 hover:shadow-lg hover:scale-105 transition-all duration-200 ease-in-out active:scale-95 py-3 px-6\"\n                data-testid=\"button-home\"\n              >\n                <Home className=\"w-4 h-4 mr-2\" />\n                Go to Homepage\n              </Button>\n            </Link>\n            <Button \n              variant=\"outline\" \n              onClick={() => window.history.back()}\n              className=\"w-full sm:w-auto hover:bg-gray-50 hover:scale-105 transition-all duration-200 ease-in-out active:scale-95 py-3 px-6\"\n              data-testid=\"button-back\"\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Go Back\n            </Button>\n          </div>\n\n          {/* Medical Society Navigation Help */}\n          <div className=\"mt-12 text-center\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Looking for something specific?</h3>\n            <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4 text-sm\">\n              <Link href=\"/\" className=\"text-primary hover:text-primary/80 hover:underline transition-colors duration-200\" data-testid=\"nav-home\" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n                Home\n              </Link>\n              <Link href=\"/about\" className=\"text-primary hover:text-primary/80 hover:underline transition-colors duration-200\" data-testid=\"nav-about\" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n                About Us\n              </Link>\n              <Link href=\"/news\" className=\"text-primary hover:text-primary/80 hover:underline transition-colors duration-200\" data-testid=\"nav-news\" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n                News\n              </Link>\n              <Link href=\"/contact\" className=\"text-primary hover:text-primary/80 hover:underline transition-colors duration-200\" data-testid=\"nav-contact\" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>\n                Contact\n              </Link>\n            </div>\n          </div>\n\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4323},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/about.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { ChevronDown, ChevronRight } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { Loading } from \"@/components/ui/loading\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Member, MemberClass } from \"@shared/schema\";\nimport { OptimizedImage } from \"@/components/OptimizedImage\";\nimport blankPfpPath from \"@assets/blank-pfp.png\";\n\nexport default function About() {\n  const [openSections, setOpenSections] = useState<{ [key: string]: boolean }>({\n    websiteManager: true, // Default to website manager being open\n    officers: true, // Default to officers being open\n    members: false,\n    advisors: false\n  });\n  const [loadingJoin, setLoadingJoin] = useState(false);\n\n  const toggleSection = (section: string) => {\n    setOpenSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n\n  // Fetch members and member classes from API\n  const { data: members = [], isLoading: membersLoading } = useQuery<Member[]>({\n    queryKey: [\"/api/members\"],\n  });\n\n  const { data: memberClasses = [] } = useQuery<MemberClass[]>({\n    queryKey: [\"/api/member-classes\"],\n  });\n\n  // Group members by class\n  const getClassMembers = (className: string) => {\n    const memberClass = memberClasses.find(mc => mc.name === className);\n    if (!memberClass) return [];\n    return members.filter(member => member.memberClassId === memberClass.id && member.isActive);\n  };\n\n  const websiteManagers = getClassMembers(\"Website Manager\");\n  const officers = getClassMembers(\"Officer\");\n  const activeMembers = getClassMembers(\"Active Member\");\n  const facultyAdvisors = getClassMembers(\"Faculty Advisors\");\n\n\n  const ProfileCard = ({ person, showPosition = false, showDepartment = false, showImage = true }: { person: Member, showPosition?: boolean, showDepartment?: boolean, showImage?: boolean }) => (\n    <div className=\"flex items-center space-x-4 p-4 bg-card dark:bg-card border border-border rounded-xl luxury-hover luxury-press\" style={{ boxShadow: 'var(--shadow-hairline)' }}>\n      {showImage && (\n        <OptimizedImage \n          src={person.image || person.thumbnail || blankPfpPath} \n          thumbnail={person.thumbnail}\n          alt={person.name}\n          className=\"w-14 h-14 rounded-full object-cover ring-2 ring-border\"\n        />\n      )}\n      <div className=\"flex-1 space-y-1\">\n        <h4 className=\"font-medium text-foreground\">{person.name}</h4>\n        {showPosition && person.role && (\n          <p className=\"text-sm text-primary font-medium\">{person.role}</p>\n        )}\n        {showDepartment && person.bio && (\n          <p className=\"text-sm text-muted-foreground\">{person.bio}</p>\n        )}\n      </div>\n    </div>\n  );\n\n  const AccordionSection = ({ \n    title, \n    isOpen, \n    onToggle, \n    children, \n    testId \n  }: { \n    title: string, \n    isOpen: boolean, \n    onToggle: () => void, \n    children: React.ReactNode,\n    testId: string \n  }) => (\n    <div className=\"border-b border-border last:border-b-0 overflow-hidden bg-card dark:bg-card rounded-xl mb-3\" style={{ boxShadow: 'var(--shadow-hairline)' }}>\n      <button\n        onClick={onToggle}\n        className=\"w-full px-6 py-6 flex items-center justify-between text-left luxury-hover touch-manipulation\"\n        data-testid={testId}\n      >\n        <span className=\"font-display text-foreground tracking-wide text-lg\">{title}</span>\n        <ChevronRight className={`w-5 h-5 text-muted-foreground transition-transform duration-300 ${isOpen ? 'rotate-90' : 'rotate-0'}`} />\n      </button>\n      <div className={`transition-all duration-300 ease-in-out ${isOpen ? 'max-h-[500px] opacity-100' : 'max-h-0 opacity-0'}`}>\n        <div className=\"px-6 pb-6 border-t border-border\">\n          <div className=\"pt-6\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-background\">\n      <Header />\n      <main className=\"py-24 luxury-fade-in\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Centered Title */}\n          <div className=\"text-center mb-20\">\n            <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-display text-foreground mb-6\" data-testid=\"about-title\">\n              About <span className=\"text-primary\">Us</span>\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">Get to know the people driving ISB Medical Society forward</p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-20 items-start\">\n            \n            {/* Left Side - Organization Description */}\n            <div className=\"luxury-scale-in\" data-testid=\"about-content\">\n              <h2 className=\"text-2xl sm:text-3xl font-display text-foreground mb-8\" data-testid=\"org-title\">Our Organization</h2>\n              \n              <div className=\"space-y-8 text-muted-foreground leading-relaxed max-w-prose\">\n                <p data-testid=\"about-description\" className=\"text-justify\">\n                  ISB MedSociety is more than just a student club — it's a community built by and for those who are passionate about the medical sciences. Founded on the belief that knowledge in medicine should not be confined to classrooms, our club provides a space where students can explore the world of healthcare, develop leadership skills, and make a meaningful impact.\n                </p>\n                \n                <div>\n                  <h3 className=\"font-display text-foreground mb-4 text-[30px]\">Why We Exist</h3>\n                  <p className=\"text-justify\">\n                    We believe the next generation of healthcare professionals must not only be knowledgeable but also empathetic, socially aware, and motivated to improve lives. ISB MedSociety nurtures this vision by creating opportunities to learn, to lead, and to give back.\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            {/* Right Side - Team Members Accordion */}\n            <div className=\"luxury-fade-in\" data-testid=\"members-section\">\n              <div className=\"space-y-4\">\n                \n                <AccordionSection\n                  title=\"Website Manager\"\n                  isOpen={openSections.websiteManager}\n                  onToggle={() => toggleSection('websiteManager')}\n                  testId=\"section-website-manager\"\n                >\n                  <div className=\"space-y-2\">\n                    {websiteManagers.map((manager: Member, index: number) => (\n                      <ProfileCard \n                        key={manager.id} \n                        person={manager} \n                        showPosition={true}\n                      />\n                    ))}\n                  </div>\n                </AccordionSection>\n\n                <AccordionSection\n                  title=\"Club Officers\"\n                  isOpen={openSections.officers}\n                  onToggle={() => toggleSection('officers')}\n                  testId=\"section-officers\"\n                >\n                  <div className=\"space-y-2\">\n                    {officers.map((officer: Member, index: number) => (\n                      <ProfileCard \n                        key={officer.id} \n                        person={officer} \n                        showPosition={true}\n                      />\n                    ))}\n                  </div>\n                </AccordionSection>\n\n                <AccordionSection\n                  title=\"Active Members\"\n                  isOpen={openSections.members}\n                  onToggle={() => toggleSection('members')}\n                  testId=\"section-members\"\n                >\n                  <div className=\"space-y-2\">\n                    {activeMembers.map((member: Member, index: number) => (\n                      <ProfileCard \n                        key={member.id} \n                        person={member}\n                        showImage={true}\n                      />\n                    ))}\n                  </div>\n                </AccordionSection>\n\n                <AccordionSection\n                  title=\"Faculty Advisors\"\n                  isOpen={openSections.advisors}\n                  onToggle={() => toggleSection('advisors')}\n                  testId=\"section-advisors\"\n                >\n                  <div className=\"space-y-2\">\n                    {facultyAdvisors.map((advisor: Member, index: number) => (\n                      <ProfileCard \n                        key={advisor.id} \n                        person={advisor} \n                        showPosition={true}\n                        showDepartment={true}\n                      />\n                    ))}\n                  </div>\n                </AccordionSection>\n\n              </div>\n            </div>\n\n          </div>\n\n          {/* Interested in Joining Section */}\n          <motion.div \n            className=\"mt-16 lg:mt-20\" \n            data-testid=\"joining-section\"\n            initial={{ opacity: 0, y: 60 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            viewport={{ once: true, margin: \"-100px\" }}\n            transition={{ duration: 0.8, ease: \"easeOut\" }}\n          >\n            <motion.div \n              className=\"bg-white rounded-lg shadow-lg p-8 lg:p-12\"\n              whileInView={{ \n                boxShadow: \"0 25px 50px -12px rgba(0, 0, 0, 0.15)\" \n              }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.6, delay: 0.2 }}\n            >\n              <motion.h2 \n                className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-center text-gray-900 mb-8 font-display\" \n                data-testid=\"joining-title\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                whileInView={{ opacity: 1, scale: 1 }}\n                viewport={{ once: true }}\n                transition={{ \n                  duration: 0.6, \n                  delay: 0.3,\n                  type: \"spring\",\n                  stiffness: 120\n                }}\n              >\n                Interested in Joining?\n              </motion.h2>\n              \n              <div className=\"max-w-3xl mx-auto text-center\">\n                <motion.p \n                  className=\"text-lg text-gray-700 mb-8 leading-relaxed\" \n                  data-testid=\"joining-description\"\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  viewport={{ once: true }}\n                  transition={{ duration: 0.6, delay: 0.5 }}\n                >\n                  ISB Medical Society welcomes students who are passionate about healthcare, medicine, and making a positive impact in our community.\n                </motion.p>\n                \n                <motion.div \n                  className=\"mb-10\"\n                  initial={{ opacity: 0, scale: 0.8 }}\n                  whileInView={{ opacity: 1, scale: 1 }}\n                  viewport={{ once: true }}\n                  transition={{ duration: 0.6, delay: 0.7 }}\n                >\n                  <motion.div\n                    whileHover={{ \n                      scale: 1.05,\n                      boxShadow: \"0 20px 40px -10px rgba(37, 99, 235, 0.3)\"\n                    }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    <Button \n                      size=\"lg\" \n                      className=\"text-white bg-blue-600 hover:bg-blue-700 outline-none focus:outline-none focus-visible:outline-none !ring-0 focus:!ring-0 focus-visible:!ring-0 focus-visible:ring-transparent focus-visible:!ring-offset-0 transition-all duration-300 px-8 py-3 text-lg font-medium rounded-lg\"\n                      data-testid=\"button-join-now\"\n                      onClick={() => {\n                        setLoadingJoin(true);\n                        setTimeout(() => {\n                          window.scrollTo({ top: 0, behavior: 'smooth' });\n                          window.location.href = '/contact';\n                          setLoadingJoin(false);\n                        }, 500);\n                      }}\n                      disabled={loadingJoin}\n                    >\n                      {loadingJoin ? (\n                        <Loading size=\"sm\" variant=\"dots\" />\n                      ) : (\n                        'Join Now'\n                      )}\n                    </Button>\n                  </motion.div>\n                </motion.div>\n                \n                <ul className=\"grid sm:grid-cols-2 lg:grid-cols-5 gap-6 text-gray-700 list-none\">\n                  {[\n                    { testId: \"benefit-grade-levels\", text: \"Open to all grade levels\" },\n                    { testId: \"benefit-no-experience\", text: \"No prior medical knowledge required\" },\n                    { testId: \"benefit-activities\", text: \"Regular meetings and exciting activities\" },\n                    { testId: \"benefit-opportunities\", text: \"Volunteer and leadership opportunities\" },\n                    { testId: \"benefit-cas-hours\", text: \"Counts toward Service for CAS\" }\n                  ].map((benefit, index) => (\n                    <motion.li \n                      key={benefit.testId}\n                      className=\"flex flex-col items-center p-4 rounded-lg cursor-pointer\" \n                      data-testid={benefit.testId}\n                      style={{\n                        boxShadow: \"0 0px 0px 0px rgba(0, 0, 0, 0)\",\n                        backgroundColor: \"transparent\"\n                      }}\n                      initial={{ opacity: 0, y: 40, scale: 0.8 }}\n                      whileInView={{ opacity: 1, y: 0, scale: 1 }}\n                      viewport={{ once: true }}\n                      transition={{ \n                        duration: 0.6, \n                        delay: 0.9 + (index * 0.15),\n                        type: \"spring\",\n                        stiffness: 100\n                      }}\n                      whileHover={{ \n                        scale: 1.05,\n                        y: -8,\n                        boxShadow: \"0 10px 30px -10px rgba(0, 0, 0, 0.15)\",\n                        backgroundColor: \"rgba(249, 250, 251, 0.8)\",\n                        transition: { duration: 0.3 }\n                      }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      <motion.div \n                        className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-3\"\n                        whileHover={{\n                          backgroundColor: \"rgba(37, 99, 235, 0.15)\",\n                          scale: 1.1,\n                          rotate: [0, -10, 10, 0],\n                          transition: { duration: 0.5 }\n                        }}\n                      >\n                        <motion.span \n                          className=\"text-blue-600 font-bold text-lg\" \n                          aria-hidden=\"true\"\n                          initial={{ opacity: 0, scale: 0 }}\n                          whileInView={{ opacity: 1, scale: 1 }}\n                          viewport={{ once: true }}\n                          transition={{ \n                            duration: 0.4, \n                            delay: 1.2 + (index * 0.15),\n                            type: \"spring\",\n                            stiffness: 200\n                          }}\n                          whileHover={{\n                            color: \"#1d4ed8\",\n                            scale: 1.2,\n                            transition: { duration: 0.2 }\n                          }}\n                        >\n                          ✓\n                        </motion.span>\n                      </motion.div>\n                      <p className=\"font-medium text-center\">{benefit.text}</p>\n                    </motion.li>\n                  ))}\n                </ul>\n              </div>\n            </motion.div>\n          </motion.div>\n\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":16270},"client/src/pages/contact.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Mail, Instagram, MapPin, Clock } from \"lucide-react\";\n\nexport default function Contact() {\n  const [scrollY, setScrollY] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => setScrollY(window.scrollY);\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-slate-900 dark:bg-slate-950\">\n      <Header />\n      {/* Premium Hero Section with Scroll Effects */}\n      <section \n        className=\"relative bg-gradient-to-b from-slate-900 to-slate-800 py-16 lg:py-20 overflow-hidden\"\n        style={{\n          height: 'min(70vh, 400px)',\n          transform: `perspective(1000px) rotateX(${Math.min(scrollY * 0.02, 5)}deg)`,\n          transformOrigin: 'bottom center',\n        }}\n      >\n        <div \n          className=\"absolute inset-0 bg-[radial-gradient(circle_at_30%_20%,rgba(148,163,184,0.05),transparent_50%)]\"\n          style={{\n            transform: `translateY(${scrollY * 0.3}px) scale(${1 + scrollY * 0.001})`,\n            opacity: Math.max(0, 1 - scrollY * 0.002)\n          }}\n        ></div>\n        <div \n          className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center\"\n          style={{\n            transform: `translateY(${scrollY * 0.5}px)`,\n            opacity: Math.max(0, 1 - scrollY * 0.003)\n          }}\n        >\n          <div className=\"space-y-8\">\n            <h1 \n              className=\"text-4xl sm:text-5xl lg:text-6xl xl:text-7xl font-light text-white leading-[0.9] tracking-tight\"\n              style={{ \n                letterSpacing: '-0.02em',\n                transform: `translateY(${scrollY * 0.2}px) scale(${Math.max(0.8, 1 - scrollY * 0.0005)})`\n              }}\n              data-testid=\"contact-title\"\n            >\n              <span \n                className=\"block font-extralight text-slate-300 text-2xl sm:text-3xl lg:text-4xl mb-4 uppercase tracking-[0.2em]\"\n                style={{\n                  transform: `translateY(${scrollY * 0.15}px)`,\n                  opacity: Math.max(0, 1 - scrollY * 0.004)\n                }}\n              >\n                Any questions or inquiries?\n              </span>\n              <span style={{\n                transform: `translateY(${scrollY * 0.25}px)`,\n                opacity: Math.max(0, 1 - scrollY * 0.0035)\n              }}>\n                Get in touch with us\n              </span>\n            </h1>\n            <p \n              className=\"text-lg lg:text-xl text-slate-400 font-light mt-6\"\n              style={{\n                transform: `translateY(${scrollY * 0.3}px)`,\n                opacity: Math.max(0, 1 - scrollY * 0.004)\n              }}\n            >\n              We're ready to help you 24/7\n            </p>\n          </div>\n        </div>\n        \n        {/* Geometric folding lines */}\n        <div \n          className=\"absolute bottom-0 left-0 right-0 h-px bg-gradient-to-r from-transparent via-slate-600 to-transparent\"\n          style={{\n            transform: `scaleY(${1 + scrollY * 0.01}) translateY(${scrollY * 0.1}px)`,\n            opacity: Math.max(0, 1 - scrollY * 0.005)\n          }}\n        ></div>\n      </section>\n      <main className=\"relative bg-slate-50 dark:bg-slate-900\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 lg:py-32\">\n\n          <div className=\"grid lg:grid-cols-5 gap-16 lg:gap-24\">\n            \n            {/* Contact Form */}\n            <div className=\"lg:col-span-3\" data-testid=\"contact-form-section\">\n              <div className=\"mb-12\">\n                <h2 className=\"text-3xl lg:text-4xl font-light text-slate-800 dark:text-slate-200 mb-4\">\n                  Send us a message\n                </h2>\n                <div className=\"w-16 h-[1px] bg-slate-300 dark:bg-slate-600\"></div>\n              </div>\n              \n              <div className=\"bg-white dark:bg-slate-800 rounded-2xl shadow-2xl overflow-hidden border-0\" \n                   style={{ \n                     boxShadow: '0 25px 60px rgba(0, 0, 0, 0.12), 0 8px 25px rgba(0, 0, 0, 0.08)' \n                   }}>\n                <div className=\"p-8 lg:p-12\">\n                  <div className=\"w-full\" data-testid=\"google-form\">\n                    <iframe \n                      src=\"https://docs.google.com/forms/d/e/1FAIpQLSdU5C0GZRTXHHyQMo8jP6iACDbj8PXYKbwDLQIPrPSmjmmmyQ/viewform?embedded=true\" \n                      className=\"w-full h-[900px] lg:h-[850px]\"\n                      frameBorder={0} \n                      title=\"ISB Medical Society Contact Form\"\n                      loading=\"lazy\"\n                      data-testid=\"contact-form-iframe\"\n                      style={{ \n                        border: 'none',\n                        borderRadius: '0'\n                      }}\n                    >\n                      Loading…\n                    </iframe>\n                    <div className=\"mt-8 text-center border-t border-slate-100 dark:border-slate-700 pt-8\">\n                      <p className=\"text-sm text-slate-500 dark:text-slate-400 mb-3 font-light\">\n                        Experiencing technical difficulties?\n                      </p>\n                      <a \n                        href=\"https://docs.google.com/forms/d/e/1FAIpQLSdU5C0GZRTXHHyQMo8jP6iACDbj8PXYKbwDLQIPrPSmjmmmyQ/viewform\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white underline text-sm font-light transition-all duration-300 tracking-wide\"\n                        data-testid=\"link-form-external\"\n                      >\n                        Open in new window\n                      </a>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Information Sidebar */}\n            <div className=\"lg:col-span-2\" data-testid=\"contact-info-section\">\n              <div className=\"space-y-16\">\n                \n                {/* Contact Methods */}\n                <div>\n                  <h2 className=\"text-2xl lg:text-3xl font-light text-slate-800 dark:text-slate-200 mb-8\">Contact Us</h2>\n                  <div className=\"space-y-8\">\n                    \n                    <div className=\"group\" data-testid=\"contact-email\">\n                      <div className=\"flex items-start space-x-4 py-6 border-b border-slate-200 dark:border-slate-700 transition-all duration-300 group-hover:border-slate-400 dark:group-hover:border-slate-500\">\n                        <Mail className=\"w-5 h-5 text-slate-400 mt-1 group-hover:text-slate-600 dark:group-hover:text-slate-300 transition-colors duration-300\" />\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"text-xs uppercase tracking-[0.15em] text-slate-500 dark:text-slate-400 font-light mb-2\">\n                            Email\n                          </p>\n                          <a \n                            href=\"mailto:info@isbmedicalsociety.org\" \n                            className=\"text-slate-700 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white text-lg font-light transition-colors duration-300 break-all\"\n                          >\n                            info@isbmedicalsociety.org\n                          </a>\n                          <p className=\"text-sm text-slate-500 dark:text-slate-400 mt-1 font-light\">We try to reply in a timely manner</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"group\" data-testid=\"contact-instagram\">\n                      <div className=\"flex items-start space-x-4 py-6 border-b border-slate-200 dark:border-slate-700 transition-all duration-300 group-hover:border-slate-400 dark:group-hover:border-slate-500\">\n                        <Instagram className=\"w-5 h-5 text-slate-400 mt-1 group-hover:text-slate-600 dark:group-hover:text-slate-300 transition-colors duration-300\" />\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"text-xs uppercase tracking-[0.15em] text-slate-500 dark:text-slate-400 font-light mb-2\">\n                            Social\n                          </p>\n                          <a \n                            href=\"https://instagram.com/isbmedsociety\" \n                            target=\"_blank\" \n                            rel=\"noopener noreferrer\" \n                            className=\"text-slate-700 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white text-lg font-light transition-colors duration-300\"\n                          >\n                            @isbmedsociety\n                          </a>\n                          <p className=\"text-sm text-slate-500 dark:text-slate-400 mt-1 font-light\">Our social media outlet</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"group\" data-testid=\"contact-location\">\n                      <div className=\"flex items-start space-x-4 py-6 border-b border-slate-200 dark:border-slate-700 transition-all duration-300 group-hover:border-slate-400 dark:group-hover:border-slate-500\">\n                        <MapPin className=\"w-5 h-5 text-slate-400 mt-1 group-hover:text-slate-600 dark:group-hover:text-slate-300 transition-colors duration-300\" />\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"text-xs uppercase tracking-[0.15em] text-slate-500 dark:text-slate-400 font-light mb-2\">\n                            Location\n                          </p>\n                          <p className=\"text-slate-700 dark:text-slate-300 text-lg font-light\">\n                            International School Bangkok\n                          </p>\n                          <p className=\"text-sm text-slate-500 dark:text-slate-400 mt-1 font-light\">Nichada Campus, Pak Kret, Nonthaburi 11120</p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"group\" data-testid=\"contact-hours\">\n                      <div className=\"flex items-start space-x-4 py-6 transition-all duration-300\">\n                        <Clock className=\"w-5 h-5 text-slate-400 mt-1 group-hover:text-slate-600 dark:group-hover:text-slate-300 transition-colors duration-300\" />\n                        <div className=\"min-w-0 flex-1\">\n                          <p className=\"text-xs uppercase tracking-[0.15em] text-slate-500 dark:text-slate-400 font-light mb-2\">Meeting Times</p>\n                          <p className=\"text-slate-700 dark:text-slate-300 text-lg font-light\">\n                            Thursday Panther Block\n                          </p>\n                          <p className=\"text-sm text-slate-500 dark:text-slate-400 mt-1 font-light\">\n                            10:55-11:25 Room 3-207\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                  </div>\n                </div>\n\n                {/* Membership Information */}\n                <div className=\"bg-primary rounded-2xl p-8 lg:p-10\">\n                  <h3 className=\"text-2xl font-light text-white mb-6\">\n                    Join Our Community\n                  </h3>\n                  <p className=\"mb-8 font-light leading-relaxed text-[#ffffff]\">\n                    ISB Medical Society welcomes students passionate about healthcare, \n                    medicine, and positive community impact.\n                  </p>\n                  <div className=\"space-y-4 text-primary-foreground/80 text-sm font-light\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 bg-white rounded-sm rotate-45\"></div>\n                      <span className=\"text-[#ffffff]\">Open to all grade levels</span>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 bg-white rounded-sm rotate-45\"></div>\n                      <span className=\"text-[#ffffff]\">No prior medical knowledge required</span>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 bg-white rounded-sm rotate-45\"></div>\n                      <span className=\"text-[#ffffff]\">Weekly meetings and activities</span>\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-2 h-2 bg-white rounded-sm rotate-45\"></div>\n                      <span className=\"text-[#ffffff]\">Leadership opportunities</span>\n                    </div>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":13254},"client/src/pages/news.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, User } from \"lucide-react\";\nimport { Loading } from \"@/components/ui/loading\";\n\nexport default function News() {\n  const newsArticles: any[] = [];\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n      \n      <main className=\"py-16 animate-in fade-in-0 slide-in-from-bottom-4 duration-700 ease-out\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          {/* Page Header */}\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl font-bold text-gray-900 mb-4 font-display\" data-testid=\"news-title\">\n              Latest News\n            </h1>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Stay updated with the latest activities, events, and achievements from ISB Medical Society\n            </p>\n          </div>\n\n          {/* Empty State */}\n          {newsArticles.length === 0 ? (\n            <div className=\"text-center py-16\" data-testid=\"news-empty-state\">\n              <div className=\"max-w-md mx-auto\">\n                <div className=\"bg-white rounded-2xl p-8 shadow-lg hover:shadow-xl hover:-translate-y-2 transition-all duration-300 ease-in-out\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4 hover:scale-110 transition-transform duration-200 ease-in-out\">\n                    <Calendar className=\"w-8 h-8 text-gray-400\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-gray-900 mb-2 font-display\">No News Yet</h3>\n                  <p className=\"text-gray-600\">\n                    We don't have any news articles at the moment. Check back soon for updates on our latest activities and events!\n                  </p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <>\n              {/* News Grid */}\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {newsArticles.map((article) => (\n                  <article \n                    key={article.id}\n                    className=\"bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300\"\n                    data-testid={`article-${article.id}`}\n                  >\n                    {/* Article Image */}\n                    <div className=\"h-48 overflow-hidden\">\n                      <img \n                        src={article.image}\n                        alt={article.title}\n                        className=\"w-full h-full object-cover hover:scale-110 transition-transform duration-300\"\n                        data-testid={`img-article-${article.id}`}\n                      />\n                    </div>\n\n                    {/* Article Content */}\n                    <div className=\"p-6\">\n                      {/* Category Badge */}\n                      <span \n                        className=\"inline-block bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full mb-3\"\n                        data-testid={`category-${article.id}`}\n                      >\n                        {article.category}\n                      </span>\n\n                      {/* Article Title */}\n                      <h2 className=\"text-xl font-bold text-gray-900 mb-3 line-clamp-2\" data-testid={`title-${article.id}`}>\n                        {article.title}\n                      </h2>\n\n                      {/* Article Excerpt */}\n                      <p className=\"text-gray-600 mb-4 line-clamp-3\" data-testid={`excerpt-${article.id}`}>\n                        {article.excerpt}\n                      </p>\n\n                      {/* Article Meta */}\n                      <div className=\"flex items-center text-sm text-gray-500 mb-4\">\n                        <User className=\"w-4 h-4 mr-1\" />\n                        <span className=\"mr-4\">{article.author}</span>\n                        <Calendar className=\"w-4 h-4 mr-1\" />\n                        <span>{article.date}</span>\n                      </div>\n\n                      {/* Read More Button */}\n                      <Button \n                        className=\"bg-blue-500 text-white hover:bg-blue-600 w-full\"\n                        data-testid={`button-read-${article.id}`}\n                      >\n                        Read Full Article\n                      </Button>\n                    </div>\n                  </article>\n                ))}\n              </div>\n\n              {/* Load More Section */}\n              <div className=\"text-center mt-16\">\n                <Button \n                  variant=\"outline\" \n                  className=\"px-8 py-3 text-lg border-2 border-primary text-primary hover:bg-primary hover:text-white transition-colors\"\n                  data-testid=\"button-load-more\"\n                  onClick={() => {\n                    setLoadingMore(true);\n                    setTimeout(() => setLoadingMore(false), 2000);\n                  }}\n                  disabled={loadingMore}\n                >\n                  {loadingMore ? (\n                    <Loading size=\"sm\" variant=\"line\" text=\"Loading more news\" />\n                  ) : (\n                    'Load More News'\n                  )}\n                </Button>\n              </div>\n            </>\n          )}\n\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":5618},"server/email.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\nif (!process.env.SENDGRID_API_KEY) {\n  throw new Error(\"SENDGRID_API_KEY environment variable must be set\");\n}\n\nconst mailService = new MailService();\nmailService.setApiKey(process.env.SENDGRID_API_KEY);\n\ninterface ContactFormData {\n  firstName: string;\n  lastName: string;\n  email: string;\n  grade?: string;\n  subject: string;\n  message: string;\n}\n\nexport async function sendContactEmail(formData: ContactFormData): Promise<boolean> {\n  try {\n    const emailContent = `\nNew contact form submission from ISB Medical Society website:\n\nName: ${formData.firstName} ${formData.lastName}\nEmail: ${formData.email}\nGrade Level: ${formData.grade || 'Not specified'}\nSubject: ${formData.subject}\n\nMessage:\n${formData.message}\n\n---\nThis email was sent from the ISB Medical Society contact form.\n    `.trim();\n\n    await mailService.send({\n      to: 'info@isbmedicalsociety.org',\n      from: formData.email,\n      subject: `ISB MedSociety Contact: ${formData.subject}`,\n      text: emailContent,\n      replyTo: formData.email,\n    });\n    \n    return true;\n  } catch (error) {\n    console.error('SendGrid email error:', error);\n    return false;\n  }\n}","size_bytes":1187},"client/src/pages/privacy.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nexport default function Privacy() {\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-background\">\n      <Header />\n      <main className=\"py-24 luxury-fade-in\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-display text-foreground mb-6\" data-testid=\"privacy-title\">\n              Privacy <span className=\"text-primary\">Policy</span>\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Your privacy is important to us. Learn how we collect, use, and protect your information.\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-4\">\n              Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n            </p>\n          </div>\n\n          <div className=\"bg-card dark:bg-card border border-border rounded-2xl p-8 lg:p-12 space-y-8\" style={{ boxShadow: 'var(--shadow-subtle)' }}>\n            \n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">1. Information We Collect</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                We collect information you provide directly to us, such as when you:\n              </p>\n              <ul className=\"list-disc list-inside text-muted-foreground space-y-2 ml-4\">\n                <li>Fill out contact forms or join our mailing list</li>\n                <li>Participate in our programs or events</li>\n                <li>Contact us via email or social media</li>\n                <li>Visit our website (through cookies and analytics)</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">2. How We Use Your Information</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                We use the information we collect to:\n              </p>\n              <ul className=\"list-disc list-inside text-muted-foreground space-y-2 ml-4\">\n                <li>Respond to your inquiries and provide customer support</li>\n                <li>Send you updates about our programs and activities</li>\n                <li>Improve our website and services</li>\n                <li>Analyze usage patterns and optimize user experience</li>\n                <li>Comply with legal obligations</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">3. Information Sharing</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                We do not sell, trade, or otherwise transfer your personal information to third parties except:\n              </p>\n              <ul className=\"list-disc list-inside text-muted-foreground space-y-2 ml-4\">\n                <li>With your explicit consent</li>\n                <li>To trusted service providers who assist us in operating our website</li>\n                <li>When required by law or to protect our rights</li>\n                <li>In connection with school administration for student-related activities</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">4. Cookies and Tracking</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We use cookies and similar tracking technologies to enhance your browsing experience, analyze website traffic, and understand user preferences. You can control cookie settings through your browser preferences.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">5. Data Security</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We implement appropriate security measures to protect your personal information against unauthorized access, alteration, disclosure, or destruction. However, no method of transmission over the internet is 100% secure.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">6. Student Privacy</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                As a student organization, we take special care to protect student privacy in accordance with educational privacy laws and school policies. We only collect information necessary for our educational and community service activities.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">7. Your Rights</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                You have the right to:\n              </p>\n              <ul className=\"list-disc list-inside text-muted-foreground space-y-2 ml-4\">\n                <li>Access the personal information we have about you</li>\n                <li>Request correction of inaccurate information</li>\n                <li>Request deletion of your personal information</li>\n                <li>Opt out of communications at any time</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">8. Contact Us</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                If you have any questions about this Privacy Policy or our data practices, please contact us at{\" \"}\n                <a href=\"mailto:info@isbmedicalsociety.org\" className=\"text-primary hover:text-primary/80 underline\">\n                  info@isbmedicalsociety.org\n                </a>\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">9. Changes to This Policy</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We may update this Privacy Policy from time to time. We will notify you of any changes by posting the new policy on this page with an updated revision date.\n              </p>\n            </section>\n\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":6490},"client/src/pages/terms.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\n\nexport default function Terms() {\n  return (\n    <div className=\"min-h-screen bg-background dark:bg-background\">\n      <Header />\n      <main className=\"py-24 luxury-fade-in\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          \n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-3xl sm:text-4xl lg:text-5xl font-display text-foreground mb-6\" data-testid=\"terms-title\">\n              Terms of <span className=\"text-primary\">Service</span>\n            </h1>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Please read these terms carefully before using our services\n            </p>\n            <p className=\"text-sm text-muted-foreground mt-4\">\n              Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n            </p>\n          </div>\n\n          <div className=\"bg-card dark:bg-card border border-border rounded-2xl p-8 lg:p-12 space-y-8\" style={{ boxShadow: 'var(--shadow-subtle)' }}>\n            \n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">1. Acceptance of Terms</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                By accessing and using the ISB Medical Society website, you accept and agree to be bound by the terms and provision of this agreement. These Terms of Service apply to all visitors, users, and others who access or use our service.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">2. Description of Service</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                ISB Medical Society provides educational content, community resources, and information about healthcare initiatives. Our services include:\n              </p>\n              <ul className=\"list-disc list-inside text-muted-foreground space-y-2 ml-4\">\n                <li>Educational materials about health and medical topics</li>\n                <li>Information about our activities and programs</li>\n                <li>Community engagement opportunities</li>\n                <li>Contact forms and communication services</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">3. User Responsibilities</h2>\n              <p className=\"text-muted-foreground leading-relaxed mb-4\">\n                When using our services, you agree to:\n              </p>\n              <ul className=\"list-disc list-inside text-muted-foreground space-y-2 ml-4\">\n                <li>Provide accurate and truthful information</li>\n                <li>Use the service for lawful purposes only</li>\n                <li>Respect the intellectual property rights of others</li>\n                <li>Not attempt to disrupt or damage our website or services</li>\n              </ul>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">4. Educational Content Disclaimer</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                The health and medical information provided on this website is for educational purposes only and should not be considered as professional medical advice. Always consult with qualified healthcare professionals for medical concerns or decisions.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">5. Intellectual Property</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                All content, logos, images, and materials on this website are the property of ISB Medical Society or its content suppliers and are protected by copyright laws. Unauthorized use or reproduction is prohibited.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">6. Limitation of Liability</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                ISB Medical Society shall not be liable for any indirect, incidental, special, consequential, or punitive damages resulting from your use of our services or any information provided on our website.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">7. Changes to Terms</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We reserve the right to modify these terms at any time. Changes will be effective immediately upon posting on this website. Your continued use of our services constitutes acceptance of any modifications.\n              </p>\n            </section>\n\n            <section>\n              <h2 className=\"text-2xl font-display text-foreground mb-4\">8. Contact Information</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                If you have any questions about these Terms of Service, please contact us at{\" \"}\n                <a href=\"mailto:info@isbmedicalsociety.org\" className=\"text-primary hover:text-primary/80 underline\">\n                  info@isbmedicalsociety.org\n                </a>\n              </p>\n            </section>\n\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":5565},"client/src/components/ui/loading.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingProps {\n  size?: \"sm\" | \"md\" | \"lg\";\n  className?: string;\n  text?: string;\n  variant?: \"spinner\" | \"dots\" | \"line\";\n}\n\nexport function Loading({ size = \"md\", className, text, variant = \"spinner\" }: LoadingProps) {\n  const sizeClasses = {\n    sm: \"w-5 h-5\",\n    md: \"w-8 h-8\", \n    lg: \"w-12 h-12\"\n  };\n\n  const dotSizes = {\n    sm: \"w-1.5 h-1.5\",\n    md: \"w-2 h-2\",\n    lg: \"w-3 h-3\"\n  };\n\n  if (variant === \"dots\") {\n    return (\n      <>\n        <style>\n          {`\n            @keyframes bo-pulse {\n              0%, 80%, 100% { \n                opacity: 0.3; \n                transform: scale(0.8); \n              }\n              40% { \n                opacity: 1; \n                transform: scale(1); \n              }\n            }\n          `}\n        </style>\n        <div className={cn(\"flex flex-col items-center justify-center gap-4\", className)}>\n          {/* Bang & Olufsen style dots */}\n          <div className=\"flex items-center gap-1.5\">\n            {[0, 1, 2].map((i) => (\n              <div\n                key={i}\n                className={cn(\n                  \"bg-foreground/80 rounded-full\",\n                  dotSizes[size]\n                )}\n                style={{\n                  animation: `bo-pulse 1.4s ease-in-out infinite`,\n                  animationDelay: `${i * 0.2}s`\n                }}\n              />\n            ))}\n          </div>\n          \n          {text && (\n            <p className=\"text-xs text-muted-foreground font-light tracking-wide uppercase\">\n              {text}\n            </p>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  if (variant === \"line\") {\n    return (\n      <>\n        <style>\n          {`\n            @keyframes bo-slide {\n              0% { transform: translateX(-100%); }\n              100% { transform: translateX(350%); }\n            }\n          `}\n        </style>\n        <div className={cn(\"flex flex-col items-center justify-center gap-4\", className)}>\n          {/* Bang & Olufsen style progress line */}\n          <div className=\"w-32 h-0.5 bg-muted rounded-full overflow-hidden\">\n            <div \n              className=\"h-full bg-gradient-to-r from-transparent via-foreground/80 to-transparent rounded-full\"\n              style={{\n                width: '40%',\n                animation: 'bo-slide 2s ease-in-out infinite'\n              }}\n            />\n          </div>\n          \n          {text && (\n            <p className=\"text-xs text-muted-foreground font-light tracking-wide uppercase\">\n              {text}\n            </p>\n          )}\n        </div>\n      </>\n    );\n  }\n\n  // Default elegant spinner\n  return (\n    <>\n      <style>\n        {`\n          @keyframes bo-spin {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n        `}\n      </style>\n      <div className={cn(\"flex flex-col items-center justify-center gap-4\", className)}>\n        {/* Bang & Olufsen style minimal spinner */}\n        <div className=\"relative\">\n          <div className={cn(\n            \"rounded-full border-2 border-muted\",\n            sizeClasses[size]\n          )}>\n            <div \n              className={cn(\n                \"absolute inset-0 rounded-full border-2 border-transparent border-t-foreground/80\",\n                sizeClasses[size]\n              )}\n              style={{\n                animation: 'bo-spin 1.5s ease-in-out infinite'\n              }}\n            />\n          </div>\n        </div>\n        \n        {text && (\n          <p className=\"text-xs text-muted-foreground font-light tracking-wide uppercase\">\n            {text}\n          </p>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport function LoadingSkeleton({ className }: { className?: string }) {\n  return (\n    <div className={cn(\"animate-pulse\", className)}>\n      <div className=\"bg-muted/60 rounded-lg h-4 w-full mb-3\" style={{ animationDelay: '0s' }}></div>\n      <div className=\"bg-muted/60 rounded-lg h-4 w-3/4 mb-3\" style={{ animationDelay: '0.1s' }}></div>\n      <div className=\"bg-muted/60 rounded-lg h-4 w-1/2\" style={{ animationDelay: '0.2s' }}></div>\n    </div>\n  );\n}\n\nexport function LoadingCard({ className }: { className?: string }) {\n  return (\n    <div className={cn(\"bg-card rounded-2xl p-6 border\", className)}>\n      <div className=\"flex items-center space-x-4 mb-4\">\n        <div className=\"w-12 h-12 bg-muted/60 rounded-full animate-pulse\"></div>\n        <div className=\"flex-1\">\n          <div className=\"h-4 bg-muted/60 rounded w-3/4 mb-2 animate-pulse\" style={{ animationDelay: '0.1s' }}></div>\n          <div className=\"h-3 bg-muted/60 rounded w-1/2 animate-pulse\" style={{ animationDelay: '0.2s' }}></div>\n        </div>\n      </div>\n      <div className=\"space-y-2\">\n        <div className=\"h-3 bg-muted/60 rounded animate-pulse\" style={{ animationDelay: '0.3s' }}></div>\n        <div className=\"h-3 bg-muted/60 rounded w-5/6 animate-pulse\" style={{ animationDelay: '0.4s' }}></div>\n        <div className=\"h-3 bg-muted/60 rounded w-4/6 animate-pulse\" style={{ animationDelay: '0.5s' }}></div>\n      </div>\n    </div>\n  );\n}","size_bytes":5140},"client/src/components/page-loading.tsx":{"content":"import { Loading } from \"@/components/ui/loading\";\n\nexport default function PageLoading() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"text-center space-y-6\">\n        <Loading size=\"lg\" />\n        <div className=\"space-y-2\">\n          <h2 className=\"text-2xl font-display text-foreground\">Loading</h2>\n          <p className=\"text-muted-foreground\">Please wait while we prepare your experience</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":515},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":306},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect, useRef, useCallback } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Users, Newspaper, Image, Plus, Edit, Trash2, Mail, ExternalLink, GraduationCap, Check, X, Save, Upload } from \"lucide-react\";\nimport { Loading } from \"@/components/ui/loading\";\nimport Cropper from \"react-easy-crop\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Member, MemberClass, News, HeroImage, AdminUser } from \"@shared/schema\";\nimport blankPfpPath from \"@assets/blank-pfp.png\";\n\nexport default function AdminPage() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n\n  // Check admin status\n  const { data: adminData, isLoading: adminLoading } = useQuery<{\n    isAdmin: boolean;\n    adminUser: AdminUser | null;\n  }>({\n    queryKey: [\"/api/auth/admin\"],\n    enabled: isAuthenticated,\n    retry: false,\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!authLoading && !isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please log in to access the admin panel.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 1000);\n      return;\n    }\n  }, [isAuthenticated, authLoading, toast]);\n\n  // Check if user has admin access\n  useEffect(() => {\n    if (!adminLoading && isAuthenticated && !adminData?.isAdmin) {\n      toast({\n        title: \"Access Denied\",\n        description: \"You don't have admin access to this panel.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 2000);\n      return;\n    }\n  }, [adminData?.isAdmin, adminLoading, isAuthenticated, toast]);\n\n  if (authLoading || adminLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <Loading size=\"lg\" variant=\"spinner\" />\n          <p className=\"text-muted-foreground\">Authenticating...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !adminData?.isAdmin) {\n    return null; // Redirecting\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900\">\n      {/* Header */}\n      <header className=\"border-b border-white/20 bg-white/80 dark:bg-slate-900/80 backdrop-blur-md sticky top-0 z-50\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <h1 \n                className=\"text-3xl font-bold text-slate-900 dark:text-white\"\n                style={{ \n                  fontFamily: 'Beo, serif',\n                  letterSpacing: '0.02em'\n                }}\n                data-testid=\"admin-title\"\n              >\n                Admin Dashboard\n              </h1>\n              <p className=\"text-muted-foreground\">Welcome back, {user?.firstName || 'Admin'}</p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300\">\n                Admin\n              </Badge>\n              <Button \n                variant=\"outline\" \n                onClick={async () => {\n                  try {\n                    await fetch(\"/api/logout\", { method: \"POST\", credentials: \"include\" });\n                    window.location.href = \"/login\";\n                  } catch (error) {\n                    window.location.href = \"/login\";\n                  }\n                }}\n                data-testid=\"button-logout\"\n              >\n                Logout\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-6 py-8\">\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"members\" className=\"space-y-6\">\n          <TabsList \n            className=\"grid w-full grid-cols-4 bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\"\n            style={{\n              boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'\n            }}\n          >\n            <TabsTrigger value=\"members\" data-testid=\"tab-members\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              Members\n            </TabsTrigger>\n            <TabsTrigger value=\"member-classes\" data-testid=\"tab-member-classes\">\n              <GraduationCap className=\"h-4 w-4 mr-2\" />\n              Member Classes\n            </TabsTrigger>\n            <TabsTrigger value=\"news\" data-testid=\"tab-news\">\n              <Newspaper className=\"h-4 w-4 mr-2\" />\n              News\n            </TabsTrigger>\n            <TabsTrigger value=\"hero\" data-testid=\"tab-hero\">\n              <Image className=\"h-4 w-4 mr-2\" />\n              Hero Images\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"members\">\n            <MemberManagement />\n          </TabsContent>\n\n          <TabsContent value=\"member-classes\">\n            <MemberClassManagement />\n          </TabsContent>\n\n          <TabsContent value=\"news\">\n            <NewsManagement />\n          </TabsContent>\n\n          <TabsContent value=\"hero\">\n            <HeroImageManagement />\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n\n// Unified Member Modal Component for both Add and Edit\nfunction MemberModal({\n  member,\n  memberClasses,\n  isOpen,\n  onOpenChange,\n  mode = \"edit\",\n  defaultMemberClassId\n}: {\n  member?: Member;\n  memberClasses: MemberClass[];\n  isOpen: boolean;\n  onOpenChange: (open: boolean) => void;\n  mode?: \"add\" | \"edit\";\n  defaultMemberClassId?: string;\n}) {\n  const [formData, setFormData] = useState({\n    name: member?.name || \"\",\n    role: member?.role || \"\",\n    image: member?.image || \"\",\n    displayOrder: member?.displayOrder || 0,\n    isActive: member?.isActive ?? true,\n    memberClassId: member?.memberClassId || defaultMemberClassId || \"\",\n  });\n  const [imageFile, setImageFile] = useState<File | null>(null);\n  const [imagePreview, setImagePreview] = useState(member?.thumbnail || member?.image || \"\");\n  const [originalImage, setOriginalImage] = useState<string | null>(null);\n  const [showCropper, setShowCropper] = useState(false);\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<any>(null);\n  const { toast } = useToast();\n\n  // Reset form when modal opens with different member or mode\n  useEffect(() => {\n    if (isOpen) {\n      setFormData({\n        name: member?.name || \"\",\n        role: member?.role || \"\",\n        image: member?.image || \"\",\n        displayOrder: member?.displayOrder || 0,\n        isActive: member?.isActive ?? true,\n        memberClassId: member?.memberClassId || defaultMemberClassId || \"\",\n      });\n      setImagePreview(member?.thumbnail || member?.image || \"\");\n      setImageFile(null);\n      setOriginalImage(null);\n      setShowCropper(false);\n      setCrop({ x: 0, y: 0 });\n      setZoom(1);\n      setCroppedAreaPixels(null);\n    }\n  }, [isOpen, member, defaultMemberClassId]);\n\n  // Update member mutation\n  const updateMemberMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"PUT\", `/api/admin/members/${member?.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      onOpenChange(false);\n      toast({\n        title: \"Success\",\n        description: \"Member updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update member. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add member mutation\n  const addMemberMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/admin/members\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      onOpenChange(false);\n      toast({\n        title: \"Success\",\n        description: \"Member added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add member. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Crop completion callback\n  const onCropComplete = useCallback(\n    (croppedArea: any, croppedAreaPixels: any) => {\n      setCroppedAreaPixels(croppedAreaPixels);\n    },\n    []\n  );\n\n  // Handle initial image selection\n  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      setImageFile(file);\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setOriginalImage(result);\n        setShowCropper(true);\n        // Reset cropping state\n        setCrop({ x: 0, y: 0 });\n        setZoom(1);\n        setCroppedAreaPixels(null);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Create cropped image\n  const createCroppedImage = useCallback(\n    async (imageSrc: string, pixelCrop: any) => {\n      const image = new window.Image();\n      image.src = imageSrc;\n      \n      return new Promise<string>((resolve) => {\n        image.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          \n          if (!ctx || !pixelCrop) {\n            resolve(imageSrc);\n            return;\n          }\n          \n          canvas.width = pixelCrop.width;\n          canvas.height = pixelCrop.height;\n          \n          ctx.drawImage(\n            image,\n            pixelCrop.x,\n            pixelCrop.y,\n            pixelCrop.width,\n            pixelCrop.height,\n            0,\n            0,\n            pixelCrop.width,\n            pixelCrop.height\n          );\n          \n          resolve(canvas.toDataURL('image/png'));\n        };\n      });\n    },\n    []\n  );\n\n  // Apply crop\n  const handleApplyCrop = async () => {\n    if (!originalImage || !croppedAreaPixels) return;\n    \n    try {\n      const croppedImage = await createCroppedImage(originalImage, croppedAreaPixels);\n      setImagePreview(croppedImage);\n      setFormData({ ...formData, image: croppedImage });\n      setShowCropper(false);\n      setOriginalImage(null);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to process cropped image. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Cancel cropping\n  const handleCancelCrop = () => {\n    setShowCropper(false);\n    setOriginalImage(null);\n    setCrop({ x: 0, y: 0 });\n    setZoom(1);\n    setCroppedAreaPixels(null);\n    // Clear the file input\n    const input = document.getElementById('image-upload') as HTMLInputElement;\n    if (input) input.value = '';\n  };\n\n  const handleSave = () => {\n    const memberClass = memberClasses.find(mc => mc.id === formData.memberClassId);\n    const isActiveMemberClass = memberClass?.name === \"Active Member\";\n    \n    const dataToSave = { ...formData };\n    if (isActiveMemberClass) {\n      dataToSave.role = \"\";\n      // Active Members can now have images, so don't clear the image field\n    }\n    \n    // Validation\n    if (!dataToSave.name.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Name is required.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!isActiveMemberClass && !dataToSave.role.trim()) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Role is required for this member class.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (mode === \"edit\") {\n      updateMemberMutation.mutate(dataToSave);\n    } else {\n      addMemberMutation.mutate(dataToSave);\n    }\n  };\n\n  const selectedClass = memberClasses.find(mc => mc.id === formData.memberClassId);\n  const isActiveMemberClass = selectedClass?.name === \"Active Member\";\n  const isLoading = updateMemberMutation.isPending || addMemberMutation.isPending;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-semibold\">\n            {mode === \"add\" ? \"Add New Member\" : \"Member Details\"}\n          </DialogTitle>\n          <DialogDescription>\n            {mode === \"add\" \n              ? \"Add a new member to the society\" \n              : `Edit detailed information for ${member?.name}`}\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Profile Image Section */}\n          <div className=\"space-y-4\">\n            <Label className=\"text-sm font-medium\">Profile Image</Label>\n            \n            {showCropper && originalImage ? (\n              <div className=\"space-y-4\">\n                <div className=\"relative w-full h-96 bg-black rounded-lg overflow-hidden\">\n                  <Cropper\n                    image={originalImage}\n                    crop={crop}\n                    zoom={zoom}\n                    aspect={1} // Square aspect ratio\n                    onCropChange={setCrop}\n                    onCropComplete={onCropComplete}\n                    onZoomChange={setZoom}\n                  />\n                </div>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm\">Zoom:</Label>\n                    <input\n                      type=\"range\"\n                      value={zoom}\n                      min={1}\n                      max={3}\n                      step={0.1}\n                      onChange={(e) => setZoom(Number(e.target.value))}\n                      className=\"flex-1\"\n                    />\n                  </div>\n                  <div className=\"flex gap-2 justify-center\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleCancelCrop}\n                      data-testid=\"button-cancel-crop\"\n                    >\n                      Cancel\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      onClick={handleApplyCrop}\n                      disabled={!croppedAreaPixels}\n                      data-testid=\"button-apply-crop\"\n                    >\n                      Apply Crop\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"relative\">\n                  <img\n                    src={imagePreview || blankPfpPath}\n                    alt={formData.name || \"Profile\"}\n                    className=\"w-32 h-32 rounded-lg object-cover border-2 border-white/20\"\n                    data-testid=\"img-detail-preview\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => document.getElementById('image-upload')?.click()}\n                    data-testid=\"button-choose-image\"\n                  >\n                    Choose Image\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => document.getElementById('image-upload')?.click()}\n                    data-testid=\"button-browse\"\n                  >\n                    Browse\n                  </Button>\n                  <input\n                    id=\"image-upload\"\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleImageChange}\n                    className=\"hidden\"\n                  />\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Form Fields */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"detail-name\">Name *</Label>\n              <Input\n                id=\"detail-name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Enter full name\"\n                data-testid=\"input-detail-name\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"detail-class\">Member Class</Label>\n              <Select\n                value={formData.memberClassId}\n                onValueChange={(value) => setFormData({ ...formData, memberClassId: value })}\n              >\n                <SelectTrigger data-testid=\"select-detail-class\">\n                  <SelectValue placeholder=\"Select member class\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {memberClasses.map((memberClass) => (\n                    <SelectItem key={memberClass.id} value={memberClass.id}>\n                      {memberClass.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            {!isActiveMemberClass && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"detail-role\">Role *</Label>\n                <Input\n                  id=\"detail-role\"\n                  value={formData.role}\n                  onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n                  placeholder=\"Enter role/title\"\n                  data-testid=\"input-detail-role\"\n                />\n              </div>\n            )}\n\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"detail-order\">Display Order</Label>\n              <Input\n                id=\"detail-order\"\n                type=\"number\"\n                value={formData.displayOrder}\n                onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n                placeholder=\"Display order\"\n                data-testid=\"input-detail-order\"\n              />\n            </div>\n          </div>\n\n          {/* Published Status */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-sm font-medium\">Status</Label>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"radio\"\n                  id=\"published\"\n                  name=\"status\"\n                  checked={formData.isActive}\n                  onChange={() => setFormData({ ...formData, isActive: true })}\n                  data-testid=\"radio-published\"\n                />\n                <Label htmlFor=\"published\" className=\"text-sm\">Published</Label>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <input\n                  type=\"radio\"\n                  id=\"unpublished\"\n                  name=\"status\"\n                  checked={!formData.isActive}\n                  onChange={() => setFormData({ ...formData, isActive: false })}\n                  data-testid=\"radio-unpublished\"\n                />\n                <Label htmlFor=\"unpublished\" className=\"text-sm\">Unpublished</Label>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex gap-2 pt-6\">\n          <Button\n            variant=\"outline\"\n            onClick={() => onOpenChange(false)}\n            disabled={isLoading}\n            data-testid=\"button-detail-cancel\"\n          >\n            Cancel\n          </Button>\n          <Button\n            onClick={handleSave}\n            disabled={isLoading}\n            data-testid=\"button-detail-save\"\n          >\n            {isLoading ? (\n              <>\n                <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" />\n                {mode === \"add\" ? \"Adding...\" : \"Saving...\"}\n              </>\n            ) : (\n              mode === \"add\" ? \"Add Member\" : \"Save\"\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Member Management Component\nfunction MemberManagement() {\n  const [detailMember, setDetailMember] = useState<Member | null>(null);\n  const { toast } = useToast();\n\n  // Fetch members and member classes\n  const { data: members, isLoading: membersLoading, isError: membersError } = useQuery<Member[]>({\n    queryKey: [\"/api/admin/members\"],\n  });\n\n  const { data: memberClasses, isLoading: classesLoading } = useQuery<MemberClass[]>({\n    queryKey: [\"/api/admin/member-classes\"],\n  });\n\n  // Group members by class\n  const getClassMembers = (className: string) => {\n    if (!members || !memberClasses) return [];\n    const memberClass = memberClasses.find(mc => mc.name === className);\n    if (!memberClass) return [];\n    return members\n      .filter(member => member.memberClassId === memberClass.id && member.isActive)\n      .sort((a, b) => {\n        const orderA = a.displayOrder || 0;\n        const orderB = b.displayOrder || 0;\n        if (orderA !== orderB) return orderA - orderB;\n        return a.name.localeCompare(b.name);\n      });\n  };\n\n  const websiteManagers = getClassMembers(\"Website Manager\");\n  const officers = getClassMembers(\"Officer\");\n  const activeMembers = getClassMembers(\"Active Member\");\n  const facultyAdvisors = getClassMembers(\"Faculty Advisors\");\n\n\n\n\n  if (membersLoading || classesLoading) {\n    return (\n      <div className=\"flex items-center justify-center p-8\">\n        <Loading variant=\"spinner\" size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (membersError) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center text-red-600\">\n            <p>Failed to load members. Please try again.</p>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card \n      className=\"bg-white/70 dark:bg-slate-800/70 backdrop-blur-md border-white/20\"\n      style={{\n        boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'\n      }}\n    >\n      <CardHeader className=\"border-b border-white/10\">\n        <CardTitle \n          className=\"text-2xl text-slate-900 dark:text-white\"\n          style={{ \n            fontFamily: 'Beo, serif',\n            letterSpacing: '0.02em'\n          }}\n          data-testid=\"members-title\"\n        >\n          Members Management\n        </CardTitle>\n        <CardDescription>\n          Manage members by their roles and classifications\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent className=\"p-6\">\n        <Accordion type=\"multiple\" defaultValue={[\"website-manager\", \"officer\"]}>\n          <ClassSection\n            value=\"website-manager\"\n            title=\"Website Manager\"\n            members={websiteManagers}\n            memberClasses={memberClasses}\n            className=\"Website Manager\"\n            onMemberDetail={setDetailMember}\n          />\n          \n          <ClassSection\n            value=\"officer\"\n            title=\"Officers\"\n            members={officers}\n            memberClasses={memberClasses}\n            className=\"Officer\"\n            onMemberDetail={setDetailMember}\n          />\n          \n          <ClassSection\n            value=\"active-member\"\n            title=\"Active Members\"\n            members={activeMembers}\n            memberClasses={memberClasses}\n            className=\"Active Member\"\n            onMemberDetail={setDetailMember}\n          />\n          \n          <ClassSection\n            value=\"faculty-advisor\"\n            title=\"Faculty Advisors\"\n            members={facultyAdvisors}\n            memberClasses={memberClasses}\n            className=\"Faculty Advisors\"\n            onMemberDetail={setDetailMember}\n          />\n        </Accordion>\n        \n        {/* Member Detail Modal */}\n        {detailMember && (\n          <MemberModal\n            member={detailMember}\n            memberClasses={memberClasses || []}\n            isOpen={!!detailMember}\n            onOpenChange={(open: boolean) => !open && setDetailMember(null)}\n            mode=\"edit\"\n          />\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Class Section Component for Accordion\nfunction ClassSection({ \n  value, \n  title, \n  members, \n  memberClasses, \n  className,\n  onMemberDetail\n}: {\n  value: string;\n  title: string;\n  members: Member[];\n  memberClasses: MemberClass[] | undefined;\n  className: string;\n  onMemberDetail?: (member: Member) => void;\n}) {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  // Mutations\n  const updateMemberMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest(\"PUT\", `/api/admin/members/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      toast({\n        title: \"Success\",\n        description: \"Member updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update member. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n  const deleteMemberMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/members/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/members\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      toast({\n        title: \"Success\",\n        description: \"Member deleted successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete member. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const targetClass = memberClasses?.find(mc => mc.name === className);\n  const isActiveMemberClass = className === \"Active Member\";\n\n  // Handle missing member class\n  if (memberClasses && !targetClass) {\n    return (\n      <AccordionItem value={value} className=\"border border-red-200 rounded-lg mb-4\">\n        <AccordionTrigger className=\"px-6 py-4 text-red-600\">\n          <span>{title} (Class Not Found)</span>\n        </AccordionTrigger>\n        <AccordionContent className=\"px-6 pb-6\">\n          <p className=\"text-red-600 text-sm\">\n            Member class \"{className}\" not found in database. Please check member class configuration.\n          </p>\n        </AccordionContent>\n      </AccordionItem>\n    );\n  }\n\n  return (\n    <AccordionItem value={value} className=\"border border-white/20 rounded-lg mb-4\">\n      <AccordionTrigger \n        className=\"px-6 py-4 hover:bg-white/50 dark:hover:bg-slate-800/50 rounded-t-lg\"\n        data-testid={`accordion-${value}`}\n      >\n        <div className=\"flex items-center justify-between w-full mr-4\">\n          <span className=\"text-lg font-medium\">{title}</span>\n          <Badge variant=\"outline\" className=\"ml-2\">\n            {members.length} {members.length === 1 ? 'member' : 'members'}\n          </Badge>\n        </div>\n      </AccordionTrigger>\n      <AccordionContent className=\"px-6 pb-6\">\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              Manage {title.toLowerCase()} for the medical society\n            </p>\n            <Button\n              size=\"sm\"\n              onClick={() => setIsAddModalOpen(true)}\n              data-testid={`button-add-${value}`}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add {className}\n            </Button>\n          </div>\n\n          <div className=\"border border-white/20 rounded-lg overflow-hidden\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-white/30 dark:bg-slate-800/30\">\n                  <TableHead className=\"w-[200px]\">Name</TableHead>\n                  {!isActiveMemberClass && <TableHead className=\"w-[150px]\">Role</TableHead>}\n                  {!isActiveMemberClass && <TableHead className=\"w-[100px]\">Image</TableHead>}\n                  <TableHead className=\"w-[80px]\">Order</TableHead>\n                  <TableHead className=\"w-[80px]\">Active</TableHead>\n                  <TableHead className=\"w-[120px]\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {members.map((member) => (\n                  <MemberInlineRow\n                    key={member.id}\n                    member={member}\n                    isActiveMemberClass={isActiveMemberClass}\n                    onSave={(data) => updateMemberMutation.mutate({ id: member.id, data })}\n                    onDelete={() => deleteMemberMutation.mutate(member.id)}\n                    onDetail={onMemberDetail}\n                    isUpdating={updateMemberMutation.isPending}\n                    isDeleting={deleteMemberMutation.isPending}\n                  />\n                ))}\n                {members.length === 0 && (\n                  <TableRow>\n                    <TableCell \n                      colSpan={isActiveMemberClass ? 4 : 6} \n                      className=\"text-center py-8 text-muted-foreground\"\n                    >\n                      No {title.toLowerCase()} yet. Click \"Add {className}\" to get started.\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </div>\n        \n        {/* Add Member Modal */}\n        <MemberModal\n          memberClasses={memberClasses || []}\n          isOpen={isAddModalOpen}\n          onOpenChange={setIsAddModalOpen}\n          mode=\"add\"\n          defaultMemberClassId={targetClass?.id}\n        />\n      </AccordionContent>\n    </AccordionItem>\n  );\n}\n\n// Member Inline Row Component for editing\nfunction MemberInlineRow({\n  member,\n  isActiveMemberClass,\n  onSave,\n  onDelete,\n  onDetail,\n  isUpdating,\n  isDeleting\n}: {\n  member: Member;\n  isActiveMemberClass: boolean;\n  onSave: (data: any) => void;\n  onDelete: () => void;\n  onDetail?: (member: Member) => void;\n  isUpdating: boolean;\n  isDeleting: boolean;\n}) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: member.name || \"\",\n    role: member.role || \"\",\n    image: member.image || \"\",\n    displayOrder: member.displayOrder || 0,\n    isActive: member.isActive ?? true,\n  });\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setFormData({ ...formData, image: result });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = () => {\n    const dataToSave = { ...formData };\n    if (isActiveMemberClass) {\n      dataToSave.role = \"\";\n      dataToSave.image = \"\";\n    }\n    onSave(dataToSave);\n    setIsEditing(false);\n  };\n\n  const canSave = formData.name.trim() && \n    (isActiveMemberClass || (formData.role.trim() && formData.image.trim()));\n\n  const handleCancel = () => {\n    setFormData({\n      name: member.name || \"\",\n      role: member.role || \"\",\n      image: member.image || \"\",\n      displayOrder: member.displayOrder || 0,\n      isActive: member.isActive ?? true,\n    });\n    setIsEditing(false);\n  };\n\n  return (\n    <TableRow className=\"hover:bg-white/20 dark:hover:bg-slate-800/20\">\n      <TableCell>\n        {isEditing ? (\n          <Input\n            value={formData.name}\n            onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n            placeholder=\"Enter name\"\n            className=\"h-8\"\n            data-testid={`input-edit-name-${member.id}`}\n          />\n        ) : (\n          <span data-testid={`text-name-${member.id}`}>{member.name}</span>\n        )}\n      </TableCell>\n      \n      {!isActiveMemberClass && (\n        <TableCell>\n          {isEditing ? (\n            <Input\n              value={formData.role}\n              onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n              placeholder=\"Enter role\"\n              className=\"h-8\"\n              data-testid={`input-edit-role-${member.id}`}\n            />\n          ) : (\n            <span data-testid={`text-role-${member.id}`}>{member.role}</span>\n          )}\n        </TableCell>\n      )}\n\n      {!isActiveMemberClass && (\n        <TableCell>\n          {isEditing ? (\n            <div className=\"flex items-center gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => fileInputRef.current?.click()}\n                className=\"h-8 text-xs\"\n                data-testid={`button-edit-image-${member.id}`}\n              >\n                <Upload className=\"h-3 w-3 mr-1\" />\n                {formData.image ? \"Change\" : \"Upload\"}\n              </Button>\n              <input\n                ref={fileInputRef}\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImageChange}\n                className=\"hidden\"\n              />\n              {formData.image && (\n                <img\n                  src={formData.image}\n                  alt=\"Preview\"\n                  className=\"w-6 h-6 rounded object-cover\"\n                  data-testid={`img-edit-preview-${member.id}`}\n                />\n              )}\n            </div>\n          ) : (\n            member.image ? (\n              <img \n                src={member.image} \n                alt={member.name}\n                className=\"w-8 h-8 rounded-full object-cover\"\n                data-testid={`img-${member.id}`}\n              />\n            ) : (\n              <span className=\"text-muted-foreground text-sm\">No image</span>\n            )\n          )}\n        </TableCell>\n      )}\n\n\n      <TableCell>\n        {isEditing ? (\n          <Input\n            type=\"number\"\n            value={formData.displayOrder}\n            onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n            className=\"h-8 w-16\"\n            data-testid={`input-edit-order-${member.id}`}\n          />\n        ) : (\n          <span data-testid={`text-order-${member.id}`}>{member.displayOrder || 0}</span>\n        )}\n      </TableCell>\n\n      <TableCell>\n        {isEditing ? (\n          <input\n            type=\"checkbox\"\n            checked={formData.isActive}\n            onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n            data-testid={`checkbox-edit-active-${member.id}`}\n          />\n        ) : (\n          <Badge variant={member.isActive ? \"default\" : \"secondary\"} data-testid={`badge-active-${member.id}`}>\n            {member.isActive ? \"Active\" : \"Inactive\"}\n          </Badge>\n        )}\n      </TableCell>\n\n      <TableCell>\n        <div className=\"flex items-center gap-2\">\n          {isEditing ? (\n            <>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleSave}\n                disabled={isUpdating || !canSave}\n                data-testid={`button-save-${member.id}`}\n              >\n                {isUpdating ? <Loading size=\"sm\" variant=\"spinner\" /> : <Check className=\"h-3 w-3\" />}\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={handleCancel}\n                disabled={isUpdating}\n                data-testid={`button-cancel-${member.id}`}\n              >\n                <X className=\"h-3 w-3\" />\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => setIsEditing(true)}\n                data-testid={`button-edit-${member.id}`}\n              >\n                <Edit className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={() => onDetail && onDetail(member)}\n                data-testid={`button-detail-${member.id}`}\n              >\n                Detail\n              </Button>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    className=\"text-red-600 hover:text-red-700\"\n                    disabled={isDeleting}\n                    data-testid={`button-delete-${member.id}`}\n                  >\n                    {isDeleting ? <Loading size=\"sm\" variant=\"spinner\" /> : <Trash2 className=\"h-3 w-3\" />}\n                  </Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>Delete Member</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      Are you sure you want to delete {member.name}? This action cannot be undone.\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\n                    <AlertDialogAction\n                      onClick={onDelete}\n                      className=\"bg-red-600 hover:bg-red-700\"\n                    >\n                      Delete\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </>\n          )}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n}\n\n// New Member Inline Row Component\nfunction NewMemberInlineRow({\n  memberClassId,\n  isActiveMemberClass,\n  onSave,\n  onCancel,\n  isLoading\n}: {\n  memberClassId: string;\n  isActiveMemberClass: boolean;\n  onSave: (data: any) => void;\n  onCancel: () => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    role: \"\",\n    image: \"\",\n    email: \"\",\n    displayOrder: 0,\n    isActive: true,\n    memberClassId: memberClassId,\n  });\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleImageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setFormData({ ...formData, image: result });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSave = () => {\n    if (!formData.name.trim()) return;\n    \n    const dataToSave = { ...formData };\n    if (isActiveMemberClass) {\n      dataToSave.role = \"\";\n      dataToSave.image = \"\";\n    } else {\n      if (!dataToSave.role.trim() || !dataToSave.image.trim()) return;\n    }\n    \n    onSave(dataToSave);\n  };\n\n  const canSave = formData.name.trim() && \n    (isActiveMemberClass || (formData.role.trim() && formData.image.trim()));\n\n  return (\n    <TableRow className=\"bg-blue-50 dark:bg-blue-900/20\">\n      <TableCell>\n        <Input\n          value={formData.name}\n          onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n          placeholder=\"Enter name *\"\n          className=\"h-8\"\n          data-testid=\"input-new-name\"\n        />\n      </TableCell>\n      \n      {!isActiveMemberClass && (\n        <TableCell>\n          <Input\n            value={formData.role}\n            onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n            placeholder=\"Enter role *\"\n            className=\"h-8\"\n            data-testid=\"input-new-role\"\n          />\n        </TableCell>\n      )}\n\n      {!isActiveMemberClass && (\n        <TableCell>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => fileInputRef.current?.click()}\n              className=\"h-8 text-xs\"\n              data-testid=\"button-new-image\"\n            >\n              <Upload className=\"h-3 w-3 mr-1\" />\n              {formData.image ? \"Change\" : \"Upload\"}\n            </Button>\n            <input\n              ref={fileInputRef}\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleImageChange}\n              className=\"hidden\"\n            />\n            {formData.image && (\n              <img\n                src={formData.image}\n                alt=\"Preview\"\n                className=\"w-6 h-6 rounded object-cover\"\n                data-testid=\"img-new-preview\"\n              />\n            )}\n          </div>\n        </TableCell>\n      )}\n\n      <TableCell>\n        <Input\n          value={formData.email}\n          onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n          placeholder=\"Email\"\n          className=\"h-8\"\n          data-testid=\"input-new-email\"\n        />\n      </TableCell>\n\n      <TableCell>\n        <Input\n          type=\"number\"\n          value={formData.displayOrder}\n          onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n          className=\"h-8 w-16\"\n          data-testid=\"input-new-order\"\n        />\n      </TableCell>\n\n      <TableCell>\n        <input\n          type=\"checkbox\"\n          checked={formData.isActive}\n          onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n          data-testid=\"checkbox-new-active\"\n        />\n      </TableCell>\n\n      <TableCell>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={handleSave}\n            disabled={isLoading || !canSave}\n            data-testid=\"button-save-new\"\n          >\n            {isLoading ? <Loading size=\"sm\" variant=\"spinner\" /> : <Check className=\"h-3 w-3\" />}\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={onCancel}\n            disabled={isLoading}\n            data-testid=\"button-cancel-new\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n}\n\n// Member Card Component\nfunction MemberCard({ \n  member, \n  onEdit, \n  onDelete, \n  isDeleting \n}: { \n  member: Member; \n  onEdit: (member: Member) => void; \n  onDelete: (id: string) => void;\n  isDeleting: boolean;\n}) {\n  return (\n    <div className=\"group relative bg-white/50 dark:bg-slate-800/50 rounded-lg border border-white/20 p-6 hover:bg-white/70 dark:hover:bg-slate-800/70 transition-all duration-300\">\n      {/* Member Photo */}\n      <div className=\"flex items-start gap-4 mb-4\">\n        <div className=\"relative\">\n          <img\n            src={member.image || \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=150&h=150\"}\n            alt={member.name}\n            className=\"w-16 h-16 rounded-full object-cover border-2 border-white/20\"\n            data-testid={`img-member-${member.id}`}\n          />\n          <div className={`absolute -bottom-1 -right-1 w-5 h-5 rounded-full border-2 border-white ${member.isActive ? 'bg-green-500' : 'bg-gray-400'}`} />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <h3 className=\"font-semibold text-slate-900 dark:text-white truncate\" data-testid={`text-member-name-${member.id}`}>\n            {member.name}\n          </h3>\n          <p className=\"text-blue-600 dark:text-blue-400 text-sm font-medium\" data-testid={`text-member-role-${member.id}`}>\n            {member.role}\n          </p>\n          {member.year && (\n            <p className=\"text-muted-foreground text-xs flex items-center gap-1\">\n              <GraduationCap className=\"h-3 w-3\" />\n              {member.year}\n            </p>\n          )}\n        </div>\n      </div>\n\n      {/* Member Bio */}\n      {member.bio && (\n        <p className=\"text-sm text-muted-foreground mb-4 line-clamp-3\" data-testid={`text-member-bio-${member.id}`}>\n          {member.bio}\n        </p>\n      )}\n\n      {/* Contact Info */}\n      <div className=\"flex items-center gap-2 mb-4\">\n        {member.linkedIn && (\n          <a\n            href={member.linkedIn}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"inline-flex items-center gap-1 text-xs text-blue-600 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\"\n            data-testid={`link-member-linkedin-${member.id}`}\n          >\n            <ExternalLink className=\"h-3 w-3\" />\n            LinkedIn\n          </a>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex items-center justify-between\">\n        <Badge variant={member.isActive ? \"default\" : \"secondary\"} data-testid={`badge-member-status-${member.id}`}>\n          {member.isActive ? \"Active\" : \"Inactive\"}\n        </Badge>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => onEdit(member)}\n            data-testid={`button-edit-member-${member.id}`}\n          >\n            <Edit className=\"h-3 w-3\" />\n          </Button>\n          <AlertDialog>\n            <AlertDialogTrigger asChild>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:hover:bg-red-900/20\"\n                disabled={isDeleting}\n                data-testid={`button-delete-member-${member.id}`}\n              >\n                {isDeleting ? <Loading size=\"sm\" variant=\"spinner\" /> : <Trash2 className=\"h-3 w-3\" />}\n              </Button>\n            </AlertDialogTrigger>\n            <AlertDialogContent>\n              <AlertDialogHeader>\n                <AlertDialogTitle>Delete Member</AlertDialogTitle>\n                <AlertDialogDescription>\n                  Are you sure you want to delete {member.name}? This action cannot be undone.\n                </AlertDialogDescription>\n              </AlertDialogHeader>\n              <AlertDialogFooter>\n                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                <AlertDialogAction\n                  onClick={() => onDelete(member.id)}\n                  className=\"bg-red-600 hover:bg-red-700\"\n                >\n                  Delete\n                </AlertDialogAction>\n              </AlertDialogFooter>\n            </AlertDialogContent>\n          </AlertDialog>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Add Member Dialog Component\nfunction AddMemberDialog({ \n  isOpen, \n  onOpenChange, \n  onSubmit, \n  isLoading \n}: { \n  isOpen: boolean; \n  onOpenChange: (open: boolean) => void; \n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    name: \"\",\n    role: \"\",\n    memberClassId: \"\",\n    bio: \"\",\n    email: \"\",\n    linkedIn: \"\",\n    year: \"\",\n    image: \"\",\n    displayOrder: 0,\n    isActive: true,\n  });\n\n  // Fetch member classes for selection\n  const { data: memberClasses } = useQuery<MemberClass[]>({\n    queryKey: [\"/api/admin/member-classes\"],\n  });\n\n  // Determine if selected class is Active Member\n  const selectedMemberClass = memberClasses?.find(mc => mc.id === formData.memberClassId);\n  const isActiveMember = selectedMemberClass?.name === \"Active Member\";\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n    setFormData({\n      name: \"\",\n      role: \"\",\n      memberClassId: \"\",\n      bio: \"\",\n      email: \"\",\n      linkedIn: \"\",\n      year: \"\",\n      image: \"\",\n      displayOrder: 0,\n      isActive: true,\n    });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogTrigger asChild>\n        <Button data-testid=\"button-add-member\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Member\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Add New Member</DialogTitle>\n          <DialogDescription>\n            Add a new member to the ISB Medical Society\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Name *</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Enter member name\"\n                required\n                data-testid=\"input-member-name\"\n              />\n            </div>\n            {!isActiveMember && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">Role *</Label>\n                <Input\n                  id=\"role\"\n                  value={formData.role}\n                  onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n                  placeholder=\"e.g., President, Vice President\"\n                  required\n                  data-testid=\"input-member-role\"\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"memberClass\">Member Class</Label>\n            <Select\n              value={formData.memberClassId || \"none\"}\n              onValueChange={(value) => setFormData({ ...formData, memberClassId: value === \"none\" ? \"\" : value })}\n            >\n              <SelectTrigger data-testid=\"select-member-class\">\n                <SelectValue placeholder=\"Select member class\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">No Class Assigned</SelectItem>\n                {memberClasses?.map((memberClass) => (\n                  <SelectItem key={memberClass.id} value={memberClass.id}>\n                    {memberClass.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"bio\">Bio</Label>\n            <Textarea\n              id=\"bio\"\n              value={formData.bio}\n              onChange={(e) => setFormData({ ...formData, bio: e.target.value })}\n              placeholder=\"Brief description of the member's background and interests\"\n              className=\"min-h-[100px]\"\n              data-testid=\"input-member-bio\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                placeholder=\"member@isbmedicalsociety.org\"\n                data-testid=\"input-member-email\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"year\">Grade/Year</Label>\n              <Input\n                id=\"year\"\n                value={formData.year}\n                onChange={(e) => setFormData({ ...formData, year: e.target.value })}\n                placeholder=\"e.g., Grade 12, Senior\"\n                data-testid=\"input-member-year\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {!isActiveMember && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"image\">Profile Image URL *</Label>\n                <Input\n                  id=\"image\"\n                  value={formData.image}\n                  onChange={(e) => setFormData({ ...formData, image: e.target.value })}\n                  placeholder=\"https://example.com/image.jpg\"\n                  required\n                  data-testid=\"input-member-image\"\n                />\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"linkedIn\">LinkedIn Profile</Label>\n              <Input\n                id=\"linkedIn\"\n                value={formData.linkedIn}\n                onChange={(e) => setFormData({ ...formData, linkedIn: e.target.value })}\n                placeholder=\"https://linkedin.com/in/username\"\n                data-testid=\"input-member-linkedin\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"displayOrder\">Display Order</Label>\n              <Input\n                id=\"displayOrder\"\n                type=\"number\"\n                value={formData.displayOrder}\n                onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n                placeholder=\"0\"\n                data-testid=\"input-member-display-order\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2 pt-8\">\n              <input\n                type=\"checkbox\"\n                id=\"isActive\"\n                checked={formData.isActive}\n                onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                data-testid=\"switch-member-active\"\n              />\n              <Label htmlFor=\"isActive\">Active Member</Label>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              data-testid=\"button-submit-member\"\n            >\n              {isLoading ? <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" /> : null}\n              Add Member\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Edit Member Dialog Component  \nfunction EditMemberDialog({ \n  member,\n  isOpen, \n  onOpenChange, \n  onSubmit, \n  isLoading \n}: { \n  member: Member;\n  isOpen: boolean; \n  onOpenChange: (open: boolean) => void; \n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    name: member.name,\n    role: member.role,\n    memberClassId: member.memberClassId || \"\",\n    bio: member.bio || \"\",\n    linkedIn: member.linkedIn || \"\",\n    year: member.year || \"\",\n    image: member.image || \"\",\n    displayOrder: member.displayOrder || 0,\n    isActive: member.isActive ?? true,\n  });\n\n  // Fetch member classes for selection\n  const { data: memberClasses } = useQuery<MemberClass[]>({\n    queryKey: [\"/api/admin/member-classes\"],\n  });\n\n  // Determine if selected class is Active Member\n  const selectedMemberClass = memberClasses?.find(mc => mc.id === formData.memberClassId);\n  const isActiveMember = selectedMemberClass?.name === \"Active Member\";\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit(formData);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Edit Member</DialogTitle>\n          <DialogDescription>\n            Update {member.name}'s information\n          </DialogDescription>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-name\">Name *</Label>\n              <Input\n                id=\"edit-name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                placeholder=\"Enter member name\"\n                required\n                data-testid=\"input-edit-member-name\"\n              />\n            </div>\n            {!isActiveMember && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-role\">Role *</Label>\n                <Input\n                  id=\"edit-role\"\n                  value={formData.role || \"\"}\n                  onChange={(e) => setFormData({ ...formData, role: e.target.value })}\n                  placeholder=\"e.g., President, Vice President\"\n                  required\n                  data-testid=\"input-edit-member-role\"\n                />\n              </div>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edit-memberClass\">Member Class</Label>\n            <Select\n              value={formData.memberClassId || \"none\"}\n              onValueChange={(value) => setFormData({ ...formData, memberClassId: value === \"none\" ? \"\" : value })}\n            >\n              <SelectTrigger data-testid=\"select-edit-member-class\">\n                <SelectValue placeholder=\"Select member class\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">No Class Assigned</SelectItem>\n                {memberClasses?.map((memberClass) => (\n                  <SelectItem key={memberClass.id} value={memberClass.id}>\n                    {memberClass.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"edit-bio\">Bio</Label>\n            <Textarea\n              id=\"edit-bio\"\n              value={formData.bio}\n              onChange={(e) => setFormData({ ...formData, bio: e.target.value })}\n              placeholder=\"Brief description of the member's background and interests\"\n              className=\"min-h-[100px]\"\n              data-testid=\"input-edit-member-bio\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-year\">Grade/Year</Label>\n              <Input\n                id=\"edit-year\"\n                value={formData.year}\n                onChange={(e) => setFormData({ ...formData, year: e.target.value })}\n                placeholder=\"e.g., Grade 12, Senior\"\n                data-testid=\"input-edit-member-year\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {!isActiveMember && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-image\">Profile Image URL *</Label>\n                <Input\n                  id=\"edit-image\"\n                  value={formData.image}\n                  onChange={(e) => setFormData({ ...formData, image: e.target.value })}\n                  placeholder=\"https://example.com/image.jpg\"\n                  required\n                  data-testid=\"input-edit-member-image\"\n                />\n              </div>\n            )}\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-linkedIn\">LinkedIn Profile</Label>\n              <Input\n                id=\"edit-linkedIn\"\n                value={formData.linkedIn}\n                onChange={(e) => setFormData({ ...formData, linkedIn: e.target.value })}\n                placeholder=\"https://linkedin.com/in/username\"\n                data-testid=\"input-edit-member-linkedin\"\n              />\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"edit-displayOrder\">Display Order</Label>\n              <Input\n                id=\"edit-displayOrder\"\n                type=\"number\"\n                value={formData.displayOrder}\n                onChange={(e) => setFormData({ ...formData, displayOrder: parseInt(e.target.value) || 0 })}\n                placeholder=\"0\"\n                data-testid=\"input-edit-member-display-order\"\n              />\n            </div>\n            <div className=\"flex items-center space-x-2 pt-8\">\n              <input\n                type=\"checkbox\"\n                id=\"edit-isActive\"\n                checked={formData.isActive}\n                onChange={(e) => setFormData({ ...formData, isActive: e.target.checked })}\n                data-testid=\"switch-edit-member-active\"\n              />\n              <Label htmlFor=\"edit-isActive\">Active Member</Label>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => onOpenChange(false)}\n              disabled={isLoading}\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              data-testid=\"button-update-member\"\n            >\n              {isLoading ? <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" /> : null}\n              Update Member\n            </Button>\n          </DialogFooter>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// News Management Component\nfunction NewsManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingNews, setEditingNews] = useState<News | null>(null);\n  const [deletingNewsId, setDeletingNewsId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch news\n  const { data: newsItems, isLoading, isError, refetch } = useQuery<News[]>({\n    queryKey: [\"/api/admin/news\"],\n  });\n\n  // Sort news by creation date (newest first)\n  const sortedNews = newsItems ? [...newsItems].sort((a, b) => {\n    const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n    const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n    return dateB - dateA;\n  }) : [];\n\n  // Add news mutation\n  const addNewsMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/admin/news\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/news\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news/published\"] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"News article added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add news article. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update news mutation\n  const updateNewsMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest(\"PUT\", `/api/admin/news/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/news\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news/published\"] });\n      setEditingNews(null);\n      toast({\n        title: \"Success\",\n        description: \"News article updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update news article. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete news mutation\n  const deleteNewsMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/news/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/news\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news/published\"] });\n      setDeletingNewsId(null);\n      toast({\n        title: \"Success\",\n        description: \"News article deleted successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete news article. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loading size=\"lg\" variant=\"spinner\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isError) {\n    return (\n      <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n        <CardContent className=\"text-center py-8\">\n          <p className=\"text-red-600 dark:text-red-400\">Failed to load news articles</p>\n          <Button onClick={() => refetch()} className=\"mt-4\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Newspaper className=\"h-5 w-5\" />\n              News Management\n            </CardTitle>\n            <CardDescription>\n              Create, edit, and publish news articles\n            </CardDescription>\n          </div>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-news\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add News Article\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <NewsForm\n                onSubmit={(data) => addNewsMutation.mutate(data)}\n                isLoading={addNewsMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {sortedNews.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Newspaper className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No News Articles</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Create your first news article to share updates\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedNews.map((newsItem) => (\n              <div\n                key={newsItem.id}\n                className=\"flex items-start gap-4 p-4 rounded-lg border bg-card hover:bg-accent/50 transition-colors\"\n                data-testid={`news-item-${newsItem.id}`}\n              >\n                <img\n                  src={newsItem.image}\n                  alt={newsItem.title}\n                  className=\"w-20 h-20 rounded-lg object-cover flex-shrink-0\"\n                />\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-start justify-between gap-2\">\n                    <div className=\"space-y-1 flex-1\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-semibold truncate\">{newsItem.title}</h3>\n                        <Badge variant={newsItem.isPublished ? \"default\" : \"secondary\"}>\n                          {newsItem.isPublished ? \"Published\" : \"Draft\"}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {newsItem.category}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {newsItem.description}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        Created: {newsItem.createdAt ? new Date(newsItem.createdAt).toLocaleDateString() : 'Unknown'}\n                        {newsItem.publishDate && (\n                          <span> • Published: {new Date(newsItem.publishDate).toLocaleDateString()}</span>\n                        )}\n                      </p>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Dialog\n                        open={editingNews?.id === newsItem.id}\n                        onOpenChange={(open) =>\n                          setEditingNews(open ? newsItem : null)\n                        }\n                      >\n                        <DialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            data-testid={`button-edit-news-${newsItem.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n                          <NewsForm\n                            newsItem={newsItem}\n                            onSubmit={(data) =>\n                              updateNewsMutation.mutate({\n                                id: newsItem.id,\n                                data,\n                              })\n                            }\n                            isLoading={updateNewsMutation.isPending}\n                          />\n                        </DialogContent>\n                      </Dialog>\n\n                      <AlertDialog\n                        open={deletingNewsId === newsItem.id}\n                        onOpenChange={(open) =>\n                          setDeletingNewsId(open ? newsItem.id : null)\n                        }\n                      >\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300\"\n                            data-testid={`button-delete-news-${newsItem.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete News Article</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Are you sure you want to delete \"{newsItem.title}\"? This action cannot be undone.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deleteNewsMutation.mutate(newsItem.id)}\n                              className=\"bg-red-600 hover:bg-red-700\"\n                            >\n                              Delete\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Edit News Dialog */}\n        {editingNews && (\n          <Dialog\n            open={!!editingNews}\n            onOpenChange={(open) => !open && setEditingNews(null)}\n          >\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n              <NewsForm\n                newsItem={editingNews}\n                onSubmit={(data) =>\n                  updateNewsMutation.mutate({\n                    id: editingNews.id,\n                    data,\n                  })\n                }\n                isLoading={updateNewsMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Member Class Management Component\nfunction MemberClassManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingClass, setEditingClass] = useState<MemberClass | null>(null);\n  const [deletingClassId, setDeletingClassId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch member classes\n  const { data: memberClasses, isLoading, isError, refetch } = useQuery<MemberClass[]>({\n    queryKey: [\"/api/admin/member-classes\"],\n  });\n\n  // Sort member classes by display order\n  const sortedClasses = memberClasses ? [...memberClasses].sort((a, b) => {\n    const orderA = a.displayOrder || 0;\n    const orderB = b.displayOrder || 0;\n    if (orderA !== orderB) return orderA - orderB;\n    return a.name.localeCompare(b.name);\n  }) : [];\n\n  // Add member class mutation\n  const addClassMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/admin/member-classes\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/member-classes\"] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Member class added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add member class. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update member class mutation\n  const updateClassMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest(\"PUT\", `/api/admin/member-classes/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/member-classes\"] });\n      setEditingClass(null);\n      toast({\n        title: \"Success\",\n        description: \"Member class updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update member class. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete member class mutation\n  const deleteClassMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/member-classes/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/member-classes\"] });\n      setDeletingClassId(null);\n      toast({\n        title: \"Success\",\n        description: \"Member class deleted successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete member class. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loading size=\"lg\" variant=\"spinner\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isError) {\n    return (\n      <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n        <CardContent className=\"text-center py-8\">\n          <p className=\"text-red-600 dark:text-red-400\">Failed to load member classes</p>\n          <Button onClick={() => refetch()} className=\"mt-4\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <GraduationCap className=\"h-5 w-5\" />\n              Member Classes\n            </CardTitle>\n            <CardDescription>\n              Manage member categories and hierarchies\n            </CardDescription>\n          </div>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-member-class\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Class\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <MemberClassForm\n                onSubmit={(data) => addClassMutation.mutate(data)}\n                isLoading={addClassMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {sortedClasses.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <GraduationCap className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Member Classes</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Create your first member class to organize your team\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {sortedClasses.map((memberClass) => (\n              <div\n                key={memberClass.id}\n                className=\"flex items-center justify-between p-4 rounded-lg border bg-card hover:bg-accent/50 transition-colors\"\n                data-testid={`member-class-${memberClass.id}`}\n              >\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2\">\n                    <h3 className=\"font-semibold\">{memberClass.name}</h3>\n                    <Badge variant={memberClass.isActive ? \"default\" : \"secondary\"}>\n                      {memberClass.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  {memberClass.description && (\n                    <p className=\"text-sm text-muted-foreground\">\n                      {memberClass.description}\n                    </p>\n                  )}\n                  <p className=\"text-xs text-muted-foreground\">\n                    Display Order: {memberClass.displayOrder ?? 0}\n                  </p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <Dialog\n                    open={editingClass?.id === memberClass.id}\n                    onOpenChange={(open) =>\n                      setEditingClass(open ? memberClass : null)\n                    }\n                  >\n                    <DialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-edit-member-class-${memberClass.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent>\n                      <MemberClassForm\n                        memberClass={memberClass}\n                        onSubmit={(data) =>\n                          updateClassMutation.mutate({\n                            id: memberClass.id,\n                            data,\n                          })\n                        }\n                        isLoading={updateClassMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n\n                  <AlertDialog\n                    open={deletingClassId === memberClass.id}\n                    onOpenChange={(open) =>\n                      setDeletingClassId(open ? memberClass.id : null)\n                    }\n                  >\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300\"\n                        data-testid={`button-delete-member-class-${memberClass.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Member Class</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete \"{memberClass.name}\"? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteClassMutation.mutate(memberClass.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\n// Member Class Form Component\nfunction MemberClassForm({\n  memberClass,\n  onSubmit,\n  isLoading,\n}: {\n  memberClass?: MemberClass;\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    name: memberClass?.name || \"\",\n    description: memberClass?.description || \"\",\n    displayOrder: memberClass?.displayOrder?.toString() || \"0\",\n    isActive: memberClass?.isActive ?? true,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      ...formData,\n      displayOrder: parseInt(formData.displayOrder) || 0,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <DialogHeader>\n        <DialogTitle>\n          {memberClass ? \"Edit Member Class\" : \"Add Member Class\"}\n        </DialogTitle>\n        <DialogDescription>\n          {memberClass\n            ? \"Update the member class information\"\n            : \"Create a new member class to categorize your team members\"}\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"name\">Class Name *</Label>\n          <Input\n            id=\"name\"\n            value={formData.name}\n            onChange={(e) =>\n              setFormData({ ...formData, name: e.target.value })\n            }\n            placeholder=\"e.g., Officers, Active Members\"\n            required\n            data-testid=\"input-member-class-name\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) =>\n              setFormData({ ...formData, description: e.target.value })\n            }\n            placeholder=\"Brief description of this member class\"\n            rows={3}\n            data-testid=\"input-member-class-description\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"displayOrder\">Display Order</Label>\n          <Input\n            id=\"displayOrder\"\n            type=\"number\"\n            value={formData.displayOrder}\n            onChange={(e) =>\n              setFormData({ ...formData, displayOrder: e.target.value })\n            }\n            placeholder=\"0\"\n            min=\"0\"\n            data-testid=\"input-member-class-display-order\"\n          />\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <input\n            type=\"checkbox\"\n            id=\"isActive\"\n            checked={formData.isActive}\n            onChange={(e) =>\n              setFormData({ ...formData, isActive: e.target.checked })\n            }\n            data-testid=\"input-member-class-active\"\n          />\n          <Label htmlFor=\"isActive\">Active</Label>\n        </div>\n      </div>\n\n      <DialogFooter>\n        <Button\n          type=\"submit\"\n          disabled={isLoading || !formData.name.trim()}\n          data-testid=\"button-submit-member-class\"\n        >\n          {isLoading && <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" />}\n          {memberClass ? \"Update\" : \"Create\"} Member Class\n        </Button>\n      </DialogFooter>\n    </form>\n  );\n}\n\n// News Form Component\nfunction NewsForm({\n  newsItem,\n  onSubmit,\n  isLoading,\n}: {\n  newsItem?: News;\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    category: newsItem?.category || \"\",\n    title: newsItem?.title || \"\",\n    description: newsItem?.description || \"\",\n    content: newsItem?.content || \"\",\n    image: newsItem?.image || \"\",\n    isPublished: newsItem?.isPublished ?? false,\n    publishDate: newsItem?.publishDate ? new Date(newsItem.publishDate).toISOString().split('T')[0] : \"\",\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      ...formData,\n      publishDate: formData.publishDate ? new Date(formData.publishDate) : null,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <DialogHeader>\n        <DialogTitle>\n          {newsItem ? \"Edit News Article\" : \"Add News Article\"}\n        </DialogTitle>\n        <DialogDescription>\n          {newsItem\n            ? \"Update the news article information\"\n            : \"Create a new news article to share updates\"}\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              value={formData.title}\n              onChange={(e) =>\n                setFormData({ ...formData, title: e.target.value })\n              }\n              placeholder=\"News article title\"\n              required\n              data-testid=\"input-news-title\"\n            />\n          </div>\n          <div>\n            <Label htmlFor=\"category\">Category *</Label>\n            <Select\n              value={formData.category}\n              onValueChange={(value) => setFormData({ ...formData, category: value })}\n            >\n              <SelectTrigger data-testid=\"select-news-category\">\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"General\">General</SelectItem>\n                <SelectItem value=\"Events\">Events</SelectItem>\n                <SelectItem value=\"Research\">Research</SelectItem>\n                <SelectItem value=\"Community\">Community</SelectItem>\n                <SelectItem value=\"Healthcare\">Healthcare</SelectItem>\n                <SelectItem value=\"Announcements\">Announcements</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description *</Label>\n          <Textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) =>\n              setFormData({ ...formData, description: e.target.value })\n            }\n            placeholder=\"Brief description of the news article\"\n            required\n            rows={3}\n            data-testid=\"input-news-description\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"content\">Content</Label>\n          <Textarea\n            id=\"content\"\n            value={formData.content}\n            onChange={(e) =>\n              setFormData({ ...formData, content: e.target.value })\n            }\n            placeholder=\"Full article content\"\n            rows={8}\n            data-testid=\"input-news-content\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"image\">Image URL *</Label>\n          <Input\n            id=\"image\"\n            value={formData.image}\n            onChange={(e) =>\n              setFormData({ ...formData, image: e.target.value })\n            }\n            placeholder=\"https://example.com/image.jpg\"\n            required\n            data-testid=\"input-news-image\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"isPublished\"\n              checked={formData.isPublished}\n              onChange={(e) =>\n                setFormData({ ...formData, isPublished: e.target.checked })\n              }\n              data-testid=\"input-news-published\"\n            />\n            <Label htmlFor=\"isPublished\">Published</Label>\n          </div>\n          \n          {formData.isPublished && (\n            <div>\n              <Label htmlFor=\"publishDate\">Publish Date</Label>\n              <Input\n                id=\"publishDate\"\n                type=\"date\"\n                value={formData.publishDate}\n                onChange={(e) =>\n                  setFormData({ ...formData, publishDate: e.target.value })\n                }\n                data-testid=\"input-news-publish-date\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n\n      <DialogFooter>\n        <Button\n          type=\"submit\"\n          disabled={isLoading || !formData.title.trim() || !formData.category.trim() || !formData.description.trim() || !formData.image.trim()}\n          data-testid=\"button-submit-news\"\n        >\n          {isLoading && <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" />}\n          {newsItem ? \"Update\" : \"Create\"} News Article\n        </Button>\n      </DialogFooter>\n    </form>\n  );\n}\n\n// Hero Images Management Component\nfunction HeroImageManagement() {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [editingHeroImage, setEditingHeroImage] = useState<HeroImage | null>(null);\n  const [deletingHeroImageId, setDeletingHeroImageId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  // Fetch hero images\n  const { data: heroImages, isLoading, isError, refetch } = useQuery<HeroImage[]>({\n    queryKey: [\"/api/admin/hero-images\"],\n  });\n\n  // Sort hero images by display order\n  const sortedHeroImages = heroImages ? [...heroImages].sort((a, b) => {\n    const orderA = a.displayOrder || 0;\n    const orderB = b.displayOrder || 0;\n    if (orderA !== orderB) return orderA - orderB;\n    return a.title.localeCompare(b.title);\n  }) : [];\n\n  // Add hero image mutation\n  const addHeroImageMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/admin/hero-images\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/hero-images\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hero-images\"] });\n      setIsAddDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Hero image added successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add hero image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update hero image mutation\n  const updateHeroImageMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest(\"PUT\", `/api/admin/hero-images/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/hero-images\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hero-images\"] });\n      setEditingHeroImage(null);\n      toast({\n        title: \"Success\",\n        description: \"Hero image updated successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update hero image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete hero image mutation\n  const deleteHeroImageMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/hero-images/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/hero-images\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hero-images\"] });\n      setDeletingHeroImageId(null);\n      toast({\n        title: \"Success\",\n        description: \"Hero image deleted successfully!\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete hero image. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n        <CardContent className=\"flex items-center justify-center py-8\">\n          <Loading size=\"lg\" variant=\"spinner\" />\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (isError) {\n    return (\n      <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n        <CardContent className=\"text-center py-8\">\n          <p className=\"text-red-600 dark:text-red-400\">Failed to load hero images</p>\n          <Button onClick={() => refetch()} className=\"mt-4\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Image className=\"h-5 w-5\" />\n              Hero Images Management\n            </CardTitle>\n            <CardDescription>\n              Manage carousel images and captions for the homepage\n            </CardDescription>\n          </div>\n          <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-add-hero-image\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Hero Image\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <HeroImageForm\n                onSubmit={(data) => addHeroImageMutation.mutate(data)}\n                isLoading={addHeroImageMutation.isPending}\n              />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {sortedHeroImages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Image className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Hero Images</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Add your first hero image to showcase on the homepage\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sortedHeroImages.map((heroImage) => (\n              <div\n                key={heroImage.id}\n                className=\"group relative bg-white/50 dark:bg-slate-800/50 rounded-lg border border-white/20 p-4 hover:bg-white/70 dark:hover:bg-slate-800/70 transition-all duration-300\"\n                data-testid={`hero-image-${heroImage.id}`}\n              >\n                <div className=\"relative mb-4\">\n                  <img\n                    src={heroImage.imageUrl}\n                    alt={heroImage.altText}\n                    className=\"w-full h-32 object-cover rounded-lg\"\n                  />\n                  <div className=\"absolute top-2 right-2 flex items-center gap-1\">\n                    <Badge variant={heroImage.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                      {heroImage.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h3 className=\"font-semibold truncate\" data-testid={`text-hero-title-${heroImage.id}`}>\n                    {heroImage.title}\n                  </h3>\n                  {heroImage.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2\" data-testid={`text-hero-description-${heroImage.id}`}>\n                      {heroImage.description}\n                    </p>\n                  )}\n                  <p className=\"text-xs text-muted-foreground\">\n                    Display Order: {heroImage.displayOrder ?? 0}\n                  </p>\n                </div>\n\n                <div className=\"flex items-center gap-2 mt-4\">\n                  <Dialog\n                    open={editingHeroImage?.id === heroImage.id}\n                    onOpenChange={(open) =>\n                      setEditingHeroImage(open ? heroImage : null)\n                    }\n                  >\n                    <DialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        data-testid={`button-edit-hero-image-${heroImage.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                      <HeroImageForm\n                        heroImage={heroImage}\n                        onSubmit={(data) =>\n                          updateHeroImageMutation.mutate({\n                            id: heroImage.id,\n                            data,\n                          })\n                        }\n                        isLoading={updateHeroImageMutation.isPending}\n                      />\n                    </DialogContent>\n                  </Dialog>\n\n                  <AlertDialog\n                    open={deletingHeroImageId === heroImage.id}\n                    onOpenChange={(open) =>\n                      setDeletingHeroImageId(open ? heroImage.id : null)\n                    }\n                  >\n                    <AlertDialogTrigger asChild>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50 dark:text-red-400 dark:hover:text-red-300\"\n                        data-testid={`button-delete-hero-image-${heroImage.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </AlertDialogTrigger>\n                    <AlertDialogContent>\n                      <AlertDialogHeader>\n                        <AlertDialogTitle>Delete Hero Image</AlertDialogTitle>\n                        <AlertDialogDescription>\n                          Are you sure you want to delete \"{heroImage.title}\"? This action cannot be undone.\n                        </AlertDialogDescription>\n                      </AlertDialogHeader>\n                      <AlertDialogFooter>\n                        <AlertDialogCancel>Cancel</AlertDialogCancel>\n                        <AlertDialogAction\n                          onClick={() => deleteHeroImageMutation.mutate(heroImage.id)}\n                          className=\"bg-red-600 hover:bg-red-700\"\n                        >\n                          Delete\n                        </AlertDialogAction>\n                      </AlertDialogFooter>\n                    </AlertDialogContent>\n                  </AlertDialog>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n// Hero Image Form Component\nfunction HeroImageForm({\n  heroImage,\n  onSubmit,\n  isLoading,\n}: {\n  heroImage?: HeroImage;\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}) {\n  const [formData, setFormData] = useState({\n    title: heroImage?.title || \"\",\n    description: heroImage?.description || \"\",\n    imageUrl: heroImage?.imageUrl || \"\",\n    altText: heroImage?.altText || \"\",\n    displayOrder: heroImage?.displayOrder?.toString() || \"0\",\n    isActive: heroImage?.isActive ?? true,\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSubmit({\n      ...formData,\n      displayOrder: parseInt(formData.displayOrder) || 0,\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <DialogHeader>\n        <DialogTitle>\n          {heroImage ? \"Edit Hero Image\" : \"Add Hero Image\"}\n        </DialogTitle>\n        <DialogDescription>\n          {heroImage\n            ? \"Update the hero image information\"\n            : \"Add a new hero image to the carousel\"}\n        </DialogDescription>\n      </DialogHeader>\n\n      <div className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"title\">Title *</Label>\n          <Input\n            id=\"title\"\n            value={formData.title}\n            onChange={(e) =>\n              setFormData({ ...formData, title: e.target.value })\n            }\n            placeholder=\"Hero image title\"\n            required\n            data-testid=\"input-hero-title\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"description\">Description</Label>\n          <Textarea\n            id=\"description\"\n            value={formData.description}\n            onChange={(e) =>\n              setFormData({ ...formData, description: e.target.value })\n            }\n            placeholder=\"Brief description of the hero image\"\n            rows={3}\n            data-testid=\"input-hero-description\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"imageUrl\">Image URL *</Label>\n          <Input\n            id=\"imageUrl\"\n            value={formData.imageUrl}\n            onChange={(e) =>\n              setFormData({ ...formData, imageUrl: e.target.value })\n            }\n            placeholder=\"https://example.com/hero-image.jpg\"\n            required\n            data-testid=\"input-hero-image-url\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"altText\">Alt Text *</Label>\n          <Input\n            id=\"altText\"\n            value={formData.altText}\n            onChange={(e) =>\n              setFormData({ ...formData, altText: e.target.value })\n            }\n            placeholder=\"Descriptive text for accessibility\"\n            required\n            data-testid=\"input-hero-alt-text\"\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <Label htmlFor=\"displayOrder\">Display Order</Label>\n            <Input\n              id=\"displayOrder\"\n              type=\"number\"\n              value={formData.displayOrder}\n              onChange={(e) =>\n                setFormData({ ...formData, displayOrder: e.target.value })\n              }\n              placeholder=\"0\"\n              min=\"0\"\n              data-testid=\"input-hero-display-order\"\n            />\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <input\n              type=\"checkbox\"\n              id=\"isActive\"\n              checked={formData.isActive}\n              onChange={(e) =>\n                setFormData({ ...formData, isActive: e.target.checked })\n              }\n              data-testid=\"input-hero-active\"\n            />\n            <Label htmlFor=\"isActive\">Active</Label>\n          </div>\n        </div>\n\n        {/* Image Preview */}\n        {formData.imageUrl && (\n          <div>\n            <Label>Preview</Label>\n            <div className=\"mt-2 border rounded-lg p-2 bg-slate-50 dark:bg-slate-800\">\n              <img\n                src={formData.imageUrl}\n                alt={formData.altText || \"Hero image preview\"}\n                className=\"w-full h-32 object-cover rounded\"\n                onError={(e) => {\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = 'none';\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      <DialogFooter>\n        <Button\n          type=\"submit\"\n          disabled={isLoading || !formData.title.trim() || !formData.imageUrl.trim() || !formData.altText.trim()}\n          data-testid=\"button-submit-hero-image\"\n        >\n          {isLoading && <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" />}\n          {heroImage ? \"Update\" : \"Create\"} Hero Image\n        </Button>\n      </DialogFooter>\n    </form>\n  );\n}\n","size_bytes":106816},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Loading } from \"@/components/ui/loading\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock, User } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function LoginPage() {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    setIsLoading(true);\n    \n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(data),\n        credentials: \"include\",\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Login Successful\",\n          description: \"Welcome to the admin dashboard!\",\n        });\n        // Redirect to admin page\n        window.location.href = \"/admin\";\n      } else {\n        const errorData = await response.json();\n        toast({\n          title: \"Login Failed\",\n          description: errorData.message || \"Invalid username or password\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"An error occurred during login. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 flex items-center justify-center p-6\">\n      <Card \n        className=\"w-full max-w-md bg-white/80 dark:bg-slate-800/80 backdrop-blur-md border border-white/20 shadow-2xl\"\n        style={{\n          boxShadow: '0 25px 50px rgba(0, 0, 0, 0.15)'\n        }}\n      >\n        <CardHeader className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-blue-500/20 rounded-full flex items-center justify-center\">\n            <Lock className=\"h-8 w-8 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <div>\n            <CardTitle \n              className=\"text-2xl font-bold text-slate-900 dark:text-white\"\n              style={{ \n                fontFamily: 'Beo, serif',\n                letterSpacing: '0.02em'\n              }}\n              data-testid=\"login-title\"\n            >\n              Admin Login\n            </CardTitle>\n            <CardDescription className=\"mt-2\">\n              Sign in to access the ISB Medical Society admin dashboard\n            </CardDescription>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input \n                          placeholder=\"Enter username\" \n                          className=\"pl-10\" \n                          {...field} \n                          data-testid=\"input-username\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input \n                          type=\"password\" \n                          placeholder=\"Enter password\" \n                          className=\"pl-10\" \n                          {...field} \n                          data-testid=\"input-password\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-login\"\n              >\n                {isLoading ? (\n                  <>\n                    <Loading size=\"sm\" variant=\"spinner\" className=\"mr-2\" />\n                    Signing In...\n                  </>\n                ) : (\n                  \"Sign In\"\n                )}\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5718},"server/db.ts":{"content":"import pg from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"../shared/schema\";\n\nconst { Pool } = pg;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle(pool, { schema });\n","size_bytes":397},"server/imageProcessor.ts":{"content":"import sharp from 'sharp';\n\nexport interface ProcessedImages {\n  original: string;\n  thumbnail: string;\n}\n\n// Convert base64 data URL to buffer\nfunction base64ToBuffer(dataURL: string): Buffer {\n  const base64Data = dataURL.split(',')[1];\n  if (!base64Data) {\n    throw new Error('Invalid data URL format');\n  }\n  return Buffer.from(base64Data, 'base64');\n}\n\n// Convert buffer to base64 data URL\nfunction bufferToBase64DataURL(buffer: Buffer, mimeType: string = 'image/jpeg'): string {\n  const base64 = buffer.toString('base64');\n  return `data:${mimeType};base64,${base64}`;\n}\n\n// Process image from base64 data URL or buffer and return base64 data URLs\nexport async function processImage(\n  input: string | Buffer, \n  memberId: string\n): Promise<ProcessedImages> {\n  let imageBuffer: Buffer;\n  \n  if (typeof input === 'string') {\n    // Handle base64 data URL\n    imageBuffer = base64ToBuffer(input);\n  } else {\n    // Handle buffer from file upload\n    imageBuffer = input;\n  }\n\n  // Process original image (max 1200px width, maintain aspect ratio)\n  const originalBuffer = await sharp(imageBuffer)\n    .resize(1200, 1200, { \n      fit: 'inside', \n      withoutEnlargement: true \n    })\n    .jpeg({ quality: 90 })\n    .toBuffer();\n\n  // Process thumbnail (256x256 square, cropped to center)\n  const thumbnailBuffer = await sharp(imageBuffer)\n    .resize(256, 256, { \n      fit: 'cover', \n      position: 'center' \n    })\n    .jpeg({ quality: 85 })\n    .toBuffer();\n\n  // Return base64 data URLs for database storage\n  return {\n    original: bufferToBase64DataURL(originalBuffer, 'image/jpeg'),\n    thumbnail: bufferToBase64DataURL(thumbnailBuffer, 'image/jpeg')\n  };\n}\n\n// No cleanup needed for base64 images - they're stored in database\nexport async function cleanupOldImages(imageUrl: string, thumbnailUrl: string) {\n  // Base64 images are stored in the database, no file cleanup needed\n  return;\n}","size_bytes":1903},"client/src/components/OptimizedImage.tsx":{"content":"import { useState } from \"react\";\nimport blankPfpPath from \"@assets/blank-pfp.png\";\n\ninterface OptimizedImageProps {\n  src: string;\n  thumbnail?: string | null;\n  alt: string;\n  className?: string;\n  fallbackSrc?: string;\n  \"data-testid\"?: string;\n}\n\nexport function OptimizedImage({ \n  src, \n  thumbnail, \n  alt, \n  className = \"\", \n  fallbackSrc,\n  \"data-testid\": testId \n}: OptimizedImageProps) {\n  const [imageError, setImageError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Use thumbnail for display if available, otherwise use original\n  const displaySrc = thumbnail || src;\n  \n  // Determine if we should use modern format sources\n  const shouldUseModernFormats = displaySrc?.startsWith('/uploads/members/');\n  \n  // Generate modern format URLs if using our processed images\n  const getModernFormatUrls = (baseUrl: string) => {\n    const basePath = baseUrl.replace(/\\.(jpg|jpeg|png)$/i, '');\n    return {\n      avif: `${basePath}.avif`,\n      webp: `${basePath}.webp`,\n      jpg: `${basePath}.jpg`\n    };\n  };\n\n  const handleImageLoad = () => {\n    setIsLoading(false);\n  };\n\n  const handleImageError = () => {\n    setImageError(true);\n    setIsLoading(false);\n  };\n\n  // Get the final fallback source\n  const getFallbackSrc = () => {\n    if (imageError) {\n      return fallbackSrc || blankPfpPath;\n    }\n    return displaySrc;\n  };\n\n  // If we have a processed image, use modern formats with fallback\n  if (shouldUseModernFormats && !imageError && displaySrc) {\n    const formats = getModernFormatUrls(displaySrc);\n    \n    return (\n      <picture className={className}>\n        <source srcSet={formats.avif} type=\"image/avif\" />\n        <source srcSet={formats.webp} type=\"image/webp\" />\n        <img\n          src={formats.jpg}\n          alt={alt}\n          loading=\"lazy\"\n          decoding=\"async\"\n          className={`${className} ${isLoading ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`}\n          onLoad={handleImageLoad}\n          onError={handleImageError}\n          data-testid={testId}\n        />\n        {isLoading && (\n          <img \n            src={blankPfpPath} \n            alt={alt} \n            className={`${className} opacity-50 absolute inset-0 rounded-inherit`} \n          />\n        )}\n      </picture>\n    );\n  }\n\n  // Fallback to regular img element for external sources or errors\n  return (\n    <div className=\"relative\">\n      <img\n        src={getFallbackSrc()}\n        alt={alt}\n        loading=\"lazy\"\n        decoding=\"async\"\n        className={`${className} ${isLoading ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`}\n        onLoad={handleImageLoad}\n        onError={handleImageError}\n        data-testid={testId}\n      />\n      {isLoading && (\n        <img \n          src={blankPfpPath} \n          alt={alt} \n          className={`${className} opacity-50 absolute inset-0 rounded-inherit`} \n        />\n      )}\n    </div>\n  );\n}","size_bytes":2942},"README.md":{"content":"# ISB Medical Society Website\n\nA modern full-stack web application for the ISB Medical Society featuring a React frontend and Express backend.\n\n## Tech Stack\n\n**Frontend:**\n- React 18 + TypeScript\n- Vite build tool  \n- TailwindCSS + Shadcn/ui components\n- TanStack Query for data fetching\n- Wouter for routing\n\n**Backend:**\n- Node.js + Express\n- PostgreSQL database\n- Drizzle ORM\n- Express sessions with PostgreSQL store\n- Image processing with Sharp\n\n## Prerequisites\n\n- Node.js 20 or higher\n- PostgreSQL database\n\n## Local Development\n\n1. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n2. **Set up environment variables:**\n   Create a `.env` file based on `.env.example`:\n   ```bash\n   DATABASE_URL=postgresql://user:password@localhost:5432/dbname\n   SESSION_SECRET=your-secret-key-here\n   SENDGRID_API_KEY=your-sendgrid-key (optional)\n   NODE_ENV=development\n   PORT=5000\n   ```\n\n3. **Run database migrations:**\n   ```bash\n   npm run db:push\n   ```\n\n4. **Start development server:**\n   ```bash\n   npm run dev\n   ```\n\n   The app will be available at http://localhost:5000\n\n## Production Deployment\n\n### Separate Deployment (Vercel + Render)\n\nThis application supports separate deployment of frontend and backend for better scalability.\n\n### Frontend (Vercel)\n\n1. **Connect your GitHub repo to Vercel**\n\n2. **Configure build settings:**\n   - Build Command: `npm run build`\n   - Output Directory: `dist/public`\n   - Install Command: `npm install`\n\n3. **Add environment variable:**\n   ```\n   VITE_API_URL=https://your-backend.onrender.com\n   ```\n   Replace with your actual Render backend URL\n\n4. **Deploy:** Vercel will automatically deploy on push to main\n\n### Backend (Render)\n\n1. **Create a new Web Service on Render**\n\n2. **Configure service:**\n   - Build Command: `npm install && npm run build`\n   - Start Command: `npm start`\n   - Environment: Node\n\n3. **Add environment variables:**\n   ```\n   DATABASE_URL=<your-render-postgres-url>\n   SESSION_SECRET=<generate-a-secure-secret>\n   SENDGRID_API_KEY=<your-sendgrid-key>\n   FRONTEND_URL=https://your-app.vercel.app\n   NODE_ENV=production\n   PORT=5000\n   ```\n   Replace `FRONTEND_URL` with your actual Vercel frontend URL for CORS\n\n4. **Database Setup:**\n   - Create a PostgreSQL database on Render\n   - Copy the Internal Database URL to DATABASE_URL\n   - Run migrations: `npm run db:push`\n\n5. **Deploy:** Render will automatically build and deploy\n\n### CORS Configuration\n\nThe backend is configured with CORS support to allow requests from the frontend:\n- In production: Only requests from the URL specified in `FRONTEND_URL` are allowed\n- In development: Allows `localhost:5000` and `localhost:5173`\n\n### Important Notes\n\n- **File Uploads**: When deploying separately, file uploads (member images, hero images) are stored on the backend server. For production use, consider using a cloud storage service like AWS S3 or Cloudinary for persistent file storage.\n- **Sessions**: The app uses PostgreSQL-backed sessions with cookies. Ensure `FRONTEND_URL` is correctly set for proper session handling across domains.\n\n### Admin Access\n\n- Default admin credentials:\n  - Username: `admin`\n  - Password: `password`\n  - **Important:** Change these in production!\n\n## Project Structure\n\n```\n├── client/          # React frontend\n│   ├── src/\n│   │   ├── components/  # UI components\n│   │   ├── pages/       # Page components\n│   │   └── lib/         # Utilities\n├── server/          # Express backend\n│   ├── routes.ts    # API routes\n│   ├── storage.ts   # Data access layer\n│   ├── db.ts        # Database connection\n│   └── index.ts     # Server entry\n├── shared/          # Shared types/schemas\n└── public/          # Static assets & uploads\n```\n\n## Features\n\n- Content management system for news and programs\n- Member directory with image optimization\n- Hero image carousel\n- Admin dashboard\n- Email integration (SendGrid)\n- Responsive design with dark mode\n\n## License\n\nMIT\n","size_bytes":4033},"render.yaml":{"content":"services:\n  - type: web\n    name: isb-medical-society-backend\n    runtime: node\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        fromDatabase:\n          name: isb-db\n          property: connectionString\n      - key: SESSION_SECRET\n        generateValue: true\n      - key: FRONTEND_URL\n        value: https://your-app.vercel.app\n\ndatabases:\n  - name: isb-db\n    databaseName: isb_medical_society\n    plan: starter\n","size_bytes":534}},"version":1}